

/*Database for controller*/
materialize(ofconn,infinity,infinity,keys(2)). /*Openflow connection to switch*/

/*Database for switch*/
materialize(ofconn,infinity,infinity,keys(2)). /*Openflow connection to controller*/
materialize(flowEntry,infinity,infinity,keys(2:str)). /*Flow table at switch*/
materialize(swToHst,infinity,infinity,keys(2)). /*Neighboring relationship*/
materialize(maxPriority,infinity,1,keys(1)). /*Records the maximum priority, initial value == 0*/

/*Database for host*/
materialize(initPacket,infinity,infinity,keys(2,3:str,4:str)). /*Packet for simulation initialization*/
materialize(recvPacket,infinity,infinity,keys(2:str,3:str)). /*Packet for simulation initialization*/
materialize(hstToSw,infinity,infinity,keys(2)). /*Neighboring relationship*/


/*Switch program*/
/*Query the controller when receiving unknown packets */
rs1 matchingPacket(@Switch, SrcMac, DstMac, InPort, TopPriority) :-
	packet(@Switch, Nei, SrcMac, DstMac),
	swToHst(@Switch, Nei, InPort),
	maxPriority(@Switch, TopPriority).

/*Recursively matching flow entries*/
rs2 matchingPacket(@Switch, SrcMac, DstMac, InPort, NextPriority) :-
	matchingPacket(@Switch, SrcMac, DstMac, InPort, Priority),
	flowEntry(@Switch, MacAdd, OutPort, Priority),
	Priority > 0,
	DstMac != MacAdd,
	NextPriority := Priority - 1.

/*A hit in flow table, forward the packet accordingly*/
rs3 packet(@OutNei, Switch, SrcMac, DstMac) :-
	matchingPacket(@Switch, SrcMac, DstMac, InPort, Priority),
	flowEntry(@Switch, MacAdd, OutPort, Priority),
	swToHst(@Switch, OutNei, OutPort),
	Priority > 0,
	DstMac == MacAdd.

/*If no flow matches, send the packet to the controller*/
rs4 ofPacket(@Controller, Switch, InPort, SrcMac, DstMac) :-
	ofconn(@Switch, Controller),
	matchingPacket(@Switch, SrcMac, DstMac, InPort, Priority),
	Priority == 0.

/*Insert a flow entry into forwarding table*/
/*(TODO): We assume all flow entries are independent, which is not general*/
rs5 flowEntry(@Switch, DstMac, OutPort, Priority) :-
	flowMod(@Switch, DstMac, OutPort),
	ofconn(@Switch, Controller),
	maxPriority(@Switch, TopPriority),
	Priority := TopPriority + 1.

/*TODO: should be a_MAX<Priority> in the head tuple*/
rs6 maxPriority(@Switch, Priority) :-
	flowEntry(@Switch, DstMac, OutPort, Priority).

/*Following the controller's instruction, send out the packet as broadcast*/
rs7 packet(@OutNei, Switch, SrcMac, DstMac) :-
	broadcast(@Switch, InPort, SrcMac, DstMac),
	swToHst(@Switch, OutNei, OutPort),
        OutPort != InPort.
(asgn-rs2-0,0): 21
(asgn-rs2-0,1): 22
(flowEntry,0): 14
(flowEntry,1): 15
(flowEntry,2): 16
(flowEntry,3): 17
(matchingPacket,0): 9
(matchingPacket,1): 10
(matchingPacket,2): 11
(matchingPacket,3): 12
(matchingPacket,4): 13
(maxPriority,0): 7
(maxPriority,1): 8
(ofPacket,0): 45
(ofPacket,1): 46
(ofPacket,2): 47
(ofPacket,3): 48
(ofPacket,4): 49
(ofconn,0): 42
(ofconn,1): 43
(packet,0): 0
(packet,1): 1
(packet,2): 2
(packet,3): 3
(select-rs20,0): 18
(select-rs21,0): 19
(select-rs21,1): 20
(select-rs30,0): 35
(select-rs31,0): 36
(select-rs31,1): 37
(select-rs40,0): 44
(swToHst,0): 4
(swToHst,1): 5
(swToHst,2): 6

node 0:node (9,Intm), node (7,Base), node (4,Base), 
node 1:node (5,Base), 
node 2:node (10,Intm), 
node 3:node (11,Intm), 
node 4:node (0,Event), 
node 5:node (1,Event), 
node 6:
node 7:node (0,Event), 
node 8:
node 9:node (46,Intm), node (42,Base), node (39,Intm), node (32,Base), node (28,Base), node (23,Intm), node (14,Base), node (0,Event), 
node 10:node (48,Intm), node (40,Intm), node (24,Intm), node (2,Event), 
node 11:node (49,Intm), node (41,Intm), node (36,Assign), node (25,Intm), node (19,Assign), node (3,Event), 
node 12:node (47,Intm), node (26,Intm), 
node 13:node (44,Assign), node (35,Assign), node (31,Base), node (22,Assign), node (18,Assign), node (17,Base), 
node 14:node (9,Event), 
node 15:
node 16:
node 17:node (13,Event), 
node 18:node (13,Event), 
node 19:node (11,Event), 
node 20:
node 21:node (27,Intm), node (22,Assign), 
node 22:node (21,Assign), node (13,Event), 
node 23:node (9,Event), 
node 24:node (10,Event), 
node 25:node (11,Event), 
node 26:node (12,Event), 
node 27:node (21,Assign), 
node 28:node (9,Event), 
node 29:
node 30:
node 31:node (13,Event), 
node 32:node (9,Event), 
node 33:
node 34:
node 35:node (13,Event), 
node 36:node (11,Event), 
node 37:
node 38:
node 39:node (9,Event), 
node 40:node (10,Event), 
node 41:node (11,Event), 
node 42:node (9,Event), 
node 43:
node 44:node (13,Event), 
node 45:
node 46:node (9,Event), 
node 47:node (12,Event), 
node 48:node (10,Event), 
node 49:node (11,Event), 
