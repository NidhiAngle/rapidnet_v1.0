/* A RapidNet application. Generated by RapidNet compiler. */

#include "dns-prov-comp-online.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::dnsprovcomponline;

const string DnsProvCompOnline::ADDRESS_RECORD = "address_record";
const string DnsProvCompOnline::EREQUESTCOUNT = "eRequestCount";
const string DnsProvCompOnline::EREQUESTTEMP = "eRequestTemp";
const string DnsProvCompOnline::EQUIHASHTABLE = "equiHashTable";
const string DnsProvCompOnline::ERESULTS = "eresults";
const string DnsProvCompOnline::ERESULTSTEMP = "eresultsTemp";
const string DnsProvCompOnline::NAME_SERVER = "name_server";
const string DnsProvCompOnline::PROVHASHTABLE = "provHashTable";
const string DnsProvCompOnline::R3RESULTSSEND = "r3resultssend";
const string DnsProvCompOnline::REQUEST = "request";
const string DnsProvCompOnline::REQUESTPROV = "requestProv";
const string DnsProvCompOnline::RESULTS = "results";
const string DnsProvCompOnline::RESULTSAUX = "resultsAux";
const string DnsProvCompOnline::RESULTSDECOMP = "resultsDecomp";
const string DnsProvCompOnline::RESULTSTEMP = "resultsTemp";
const string DnsProvCompOnline::RULEEXEC = "ruleExec";
const string DnsProvCompOnline::URL = "url";
const string DnsProvCompOnline::URLCOUNT = "urlCount";
const string DnsProvCompOnline::URLHASH = "urlHash";

NS_LOG_COMPONENT_DEFINE ("DnsProvCompOnline");
NS_OBJECT_ENSURE_REGISTERED (DnsProvCompOnline);

TypeId
DnsProvCompOnline::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::dnsprovcomponline::DnsProvCompOnline")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<DnsProvCompOnline> ()
    ;
  return tid;
}

DnsProvCompOnline::DnsProvCompOnline()
{
  NS_LOG_FUNCTION_NOARGS ();
}

DnsProvCompOnline::~DnsProvCompOnline()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
DnsProvCompOnline::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
DnsProvCompOnline::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("DnsProvCompOnline Application Started");
}

void
DnsProvCompOnline::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("DnsProvCompOnline Application Stopped");
}

void
DnsProvCompOnline::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ADDRESS_RECORD, attrdeflist (
    attrdef ("address_record_attr1", IPV4),
    attrdef ("address_record_attr2", STR),
    attrdef ("address_record_attr3", IPV4)));

  AddRelationWithKeys (EQUIHASHTABLE, attrdeflist (
    attrdef ("equiHashTable_attr2", STR)));

  AddRelationWithKeys (NAME_SERVER, attrdeflist (
    attrdef ("name_server_attr1", IPV4),
    attrdef ("name_server_attr2", STR),
    attrdef ("name_server_attr3", STR)));

  AddRelationWithKeys (PROVHASHTABLE, attrdeflist (
    attrdef ("provHashTable_attr3", LIST)));

  AddRelationWithKeys (RESULTS, attrdeflist (
    attrdef ("results_attr1", IPV4),
    attrdef ("results_attr2", STR),
    attrdef ("results_attr3", IPV4),
    attrdef ("results_attr4", INT32)));

  AddRelationWithKeys (RESULTSAUX, attrdeflist (
    attrdef ("resultsAux_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr4", LIST)));

  AddRelationWithKeys (URL, attrdeflist (
    attrdef ("url_attr1", IPV4),
    attrdef ("url_attr2", STR),
    attrdef ("url_attr3", IPV4),
    attrdef ("url_attr4", INT32)));

}

void
DnsProvCompOnline::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, REQUESTPROV))
    {
      Prov_r1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTCOUNT))
    {
      Prov_r1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r1_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      R1_eca (tuple);
    }
  if (IsInsertEvent (tuple, URL))
    {
      R100Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, URLHASH))
    {
      R101_eca (tuple);
    }
  if (IsRecvEvent (tuple, URLCOUNT))
    {
      R102_eca (tuple);
    }
  if (IsRecvEvent (tuple, URLCOUNT))
    {
      R103_eca (tuple);
    }
  if (IsRecvEvent (tuple, URLCOUNT))
    {
      Prov_r2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, REQUESTPROV))
    {
      Prov_r3_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTSTEMP))
    {
      Prov_r3_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTSTEMP))
    {
      Prov_r3_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTS))
    {
      Prov_r3_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, RESULTSTEMP))
    {
      Prov_r3_6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RESULTSDECOMP))
    {
      Prov_r3_7_eca (tuple);
    }
  if (IsRecvEvent (tuple, RESULTSDECOMP))
    {
      Prov_r3_8_eca (tuple);
    }
  if (IsRecvEvent (tuple, R3RESULTSSEND))
    {
      R3ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      R3_eca (tuple);
    }
  if (IsInsertEvent (tuple, RESULTS))
    {
      R4Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RESULTS))
    {
      R4Eca0Del (tuple);
    }
}

void
DnsProvCompOnline::Prov_r1_1_eca (Ptr<Tuple> requestProv)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    requestProv,
    strlist ("name_server_attr1"),
    strlist ("requestProv_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "requestProv_attr1"));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("requestProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("requestProv_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("requestProv_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "requestProv_attr2",
      "requestProv_attr3",
      "requestProv_attr4",
      "RID",
      "R",
      "List",
      "requestProv_attr5",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvCompOnline::Prov_r1_2_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eRequestTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("eRequestTemp_attr8", "eRequestTemp_attr7", "eRequestTemp_attr6", "eRequestTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eRequestTemp);

  result = result->Project (
    EREQUESTCOUNT,
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "count"),
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4",
      "eRequestCount_attr5"));

  SendLocal (result);
}

void
DnsProvCompOnline::Prov_r1_3_eca (Ptr<Tuple> eRequestCount)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_eca triggered");

  Ptr<Tuple> result = eRequestCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eRequestCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
DnsProvCompOnline::Prov_r1_4_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_eca triggered");

  Ptr<Tuple> result = eRequestTemp;

  result->Assign (Assignor::New ("Hash",
    FAppend::New (
      VarExpr::New ("eRequestTemp_attr6"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("eRequestTemp_attr9"),
      VarExpr::New ("Hash"))));

  result = result->Project (
    REQUESTPROV,
    strlist ("eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "NewTag",
      "eRequestTemp_attr2"),
    strlist ("requestProv_attr1",
      "requestProv_attr2",
      "requestProv_attr3",
      "requestProv_attr4",
      "requestProv_attr5",
      RN_DEST));

  Send (result);
}

void
DnsProvCompOnline::R1_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("R1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    REQUEST,
    strlist ("address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "request_attr5",
      "address_record_attr3"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "request_attr5",
      RN_DEST));

  Send (result);
}

void
DnsProvCompOnline::R100Eca0Ins (Ptr<Tuple> url)
{
  RAPIDNET_LOG_INFO ("R100Eca0Ins triggered");

  Ptr<Tuple> result = url;

  result->Assign (Assignor::New ("PIDequi",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("url_attr1")),
        VarExpr::New ("url_attr2")))));

  result = result->Project (
    URLHASH,
    strlist ("url_attr1",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "PIDequi"),
    strlist ("urlHash_attr1",
      "urlHash_attr2",
      "urlHash_attr3",
      "urlHash_attr4",
      "urlHash_attr5"));

  SendLocal (result);
}

void
DnsProvCompOnline::R101_eca (Ptr<Tuple> urlHash)
{
  RAPIDNET_LOG_INFO ("R101_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (EQUIHASHTABLE)->Join (
    urlHash,
    strlist ("equiHashTable_attr3", "equiHashTable_attr2", "equiHashTable_attr1"),
    strlist ("urlHash_attr5", "urlHash_attr2", "urlHash_attr1"));

  result = AggWrapCount::New ()->Compute (result, urlHash);

  result = result->Project (
    URLCOUNT,
    strlist ("urlHash_attr1",
      "urlHash_attr2",
      "urlHash_attr3",
      "urlHash_attr4",
      "urlHash_attr5",
      "count"),
    strlist ("urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr3",
      "urlCount_attr4",
      "urlCount_attr5",
      "urlCount_attr6"));

  SendLocal (result);
}

void
DnsProvCompOnline::R102_eca (Ptr<Tuple> urlCount)
{
  RAPIDNET_LOG_INFO ("R102_eca triggered");

  Ptr<Tuple> result = urlCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("urlCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EQUIHASHTABLE,
    strlist ("urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr5"),
    strlist ("equiHashTable_attr1",
      "equiHashTable_attr2",
      "equiHashTable_attr3"));

  Insert (result);
}

void
DnsProvCompOnline::R103_eca (Ptr<Tuple> urlCount)
{
  RAPIDNET_LOG_INFO ("R103_eca triggered");

  Ptr<Tuple> result = urlCount;

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("url")),
              VarExpr::New ("urlCount_attr1")),
            VarExpr::New ("urlCount_attr2")),
          VarExpr::New ("urlCount_attr3")),
        VarExpr::New ("urlCount_attr4")))));

  result->Assign (Assignor::New ("PIDequiHash",
    FAppend::New (
      VarExpr::New ("urlCount_attr5"))));

  result->Assign (Assignor::New ("PIDevHash",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("PIDHash",
    FConcat::New (
      VarExpr::New ("PIDequiHash"),
      VarExpr::New ("PIDevHash"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("urlCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    REQUEST,
    strlist ("urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr3",
      "urlCount_attr4",
      "PIDHash"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "request_attr5"));

  SendLocal (result);
}

void
DnsProvCompOnline::Prov_r2_1_eca (Ptr<Tuple> urlCount)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1_eca triggered");

  Ptr<Tuple> result = urlCount;

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("url")),
              VarExpr::New ("urlCount_attr1")),
            VarExpr::New ("urlCount_attr2")),
          VarExpr::New ("urlCount_attr3")),
        VarExpr::New ("urlCount_attr4")))));

  result->Assign (Assignor::New ("Equilist",
    FAppend::New (
      VarExpr::New ("urlCount_attr5"))));

  result->Assign (Assignor::New ("Evlist",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("Tag",
    FConcat::New (
      VarExpr::New ("Equilist"),
      VarExpr::New ("Evlist"))));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("urlCount_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("urlCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr3",
      "urlCount_attr4",
      "RID",
      "R",
      "List",
      "Tag",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvCompOnline::Prov_r3_1_eca (Ptr<Tuple> requestProv)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    requestProv,
    strlist ("name_server_attr1"),
    strlist ("requestProv_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "requestProv_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("request")),
              VarExpr::New ("requestProv_attr1")),
            VarExpr::New ("requestProv_attr2")),
          VarExpr::New ("requestProv_attr3")),
        VarExpr::New ("requestProv_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("requestProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("requestProv_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("requestProv_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    ERESULTSTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "requestProv_attr2",
      "requestProv_attr3",
      "requestProv_attr4",
      "RID",
      "R",
      "List",
      "requestProv_attr5",
      "RLOC"),
    strlist ("eresultsTemp_attr1",
      "eresultsTemp_attr2",
      "eresultsTemp_attr3",
      "eresultsTemp_attr4",
      "eresultsTemp_attr5",
      "eresultsTemp_attr6",
      "eresultsTemp_attr7",
      "eresultsTemp_attr8",
      "eresultsTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvCompOnline::Prov_r3_2_eca (Ptr<Tuple> eresultsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eresultsTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("eresultsTemp_attr8", "eresultsTemp_attr7", "eresultsTemp_attr6", "eresultsTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eresultsTemp);

  result = result->Project (
    EREQUESTCOUNT,
    strlist ("eresultsTemp_attr1",
      "eresultsTemp_attr6",
      "eresultsTemp_attr7",
      "eresultsTemp_attr8",
      "count"),
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4",
      "eRequestCount_attr5"));

  SendLocal (result);
}

void
DnsProvCompOnline::Prov_r3_4_eca (Ptr<Tuple> eresultsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_eca triggered");

  Ptr<Tuple> result = eresultsTemp;

  result = result->Project (
    ERESULTS,
    strlist ("eresultsTemp_attr2",
      "eresultsTemp_attr3",
      "eresultsTemp_attr4",
      "eresultsTemp_attr5",
      "eresultsTemp_attr6",
      "eresultsTemp_attr1",
      "eresultsTemp_attr9",
      "eresultsTemp_attr2"),
    strlist ("eresults_attr1",
      "eresults_attr2",
      "eresults_attr3",
      "eresults_attr4",
      "eresults_attr5",
      "eresults_attr6",
      "eresults_attr7",
      RN_DEST));

  Send (result);
}

void
DnsProvCompOnline::Prov_r3_5_eca (Ptr<Tuple> eresults)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_eca triggered");

  Ptr<Tuple> result = eresults;

  result->Assign (Assignor::New ("Hash",
    FAppend::New (
      VarExpr::New ("eresults_attr5"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("eresults_attr7"),
      VarExpr::New ("Hash"))));

  result = result->Project (
    RESULTSTEMP,
    strlist ("eresults_attr1",
      "eresults_attr2",
      "eresults_attr3",
      "eresults_attr4",
      "eresults_attr7"),
    strlist ("resultsTemp_attr1",
      "resultsTemp_attr2",
      "resultsTemp_attr3",
      "resultsTemp_attr4",
      "resultsTemp_attr5"));

  SendLocal (result);
}

void
DnsProvCompOnline::Prov_r3_6_eca (Ptr<Tuple> resultsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_6_eca triggered");

  Ptr<Tuple> result = resultsTemp;

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("resultsTemp_attr5"))));

  result->Assign (Assignor::New ("Remainlist",
    FRemoveFirst::New (
      VarExpr::New ("resultsTemp_attr5"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("Remainlist"))));

  result->Assign (Assignor::New ("Hashlist",
    FRemoveFirst::New (
      VarExpr::New ("Remainlist"))));

  result = result->Project (
    RESULTSDECOMP,
    strlist ("resultsTemp_attr1",
      "resultsTemp_attr2",
      "resultsTemp_attr3",
      "resultsTemp_attr4",
      "PIDequi",
      "PIDev",
      "Hashlist"),
    strlist ("resultsDecomp_attr1",
      "resultsDecomp_attr2",
      "resultsDecomp_attr3",
      "resultsDecomp_attr4",
      "resultsDecomp_attr5",
      "resultsDecomp_attr6",
      "resultsDecomp_attr7"));

  SendLocal (result);
}

void
DnsProvCompOnline::Prov_r3_7_eca (Ptr<Tuple> resultsDecomp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_7_eca triggered");

  Ptr<Tuple> result = resultsDecomp;

  result = result->Project (
    PROVHASHTABLE,
    strlist ("resultsDecomp_attr1",
      "resultsDecomp_attr5",
      "resultsDecomp_attr7"),
    strlist ("provHashTable_attr1",
      "provHashTable_attr2",
      "provHashTable_attr3"));

  Insert (result);
}

void
DnsProvCompOnline::Prov_r3_8_eca (Ptr<Tuple> resultsDecomp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_8_eca triggered");

  Ptr<Tuple> result = resultsDecomp;

  result = result->Project (
    RESULTS,
    strlist ("resultsDecomp_attr1",
      "resultsDecomp_attr2",
      "resultsDecomp_attr3",
      "resultsDecomp_attr4",
      "resultsDecomp_attr5",
      "resultsDecomp_attr6"),
    strlist ("results_attr1",
      "results_attr2",
      "results_attr3",
      "results_attr4",
      "results_attr5",
      "results_attr6"));

  Insert (result);
}

void
DnsProvCompOnline::R3ECAMat (Ptr<Tuple> r3resultssend)
{
  RAPIDNET_LOG_INFO ("R3ECAMat triggered");

  Ptr<Tuple> result = r3resultssend;

  result = result->Project (
    RESULTS,
    strlist ("r3resultssend_attr1",
      "r3resultssend_attr2",
      "r3resultssend_attr3",
      "r3resultssend_attr4",
      "r3resultssend_attr5",
      "r3resultssend_attr6"),
    strlist ("results_attr1",
      "results_attr2",
      "results_attr3",
      "results_attr4",
      "results_attr5",
      "results_attr6"));

  Insert (result);
}

void
DnsProvCompOnline::R3_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("R3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("request_attr5"))));

  result->Assign (Assignor::New ("PIDevHash",
    FRemoveFirst::New (
      VarExpr::New ("request_attr5"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("PIDevHash"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    R3RESULTSSEND,
    strlist ("address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "PIDequi",
      "PIDev",
      "address_record_attr3"),
    strlist ("r3resultssend_attr1",
      "r3resultssend_attr2",
      "r3resultssend_attr3",
      "r3resultssend_attr4",
      "r3resultssend_attr5",
      "r3resultssend_attr6",
      RN_DEST));

  Send (result);
}

void
DnsProvCompOnline::R4Eca0Ins (Ptr<Tuple> results)
{
  RAPIDNET_LOG_INFO ("R4Eca0Ins triggered");

  Ptr<Tuple> result = results;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("results")),
              VarExpr::New ("results_attr1")),
            VarExpr::New ("results_attr2")),
          VarExpr::New ("results_attr3")),
        VarExpr::New ("results_attr4")))));

  result = result->Project (
    RESULTSAUX,
    strlist ("results_attr1",
      "PID",
      "results_attr5",
      "results_attr6"),
    strlist ("resultsAux_attr1",
      "resultsAux_attr2",
      "resultsAux_attr3",
      "resultsAux_attr4"));

  Insert (result);
}

void
DnsProvCompOnline::R4Eca0Del (Ptr<Tuple> results)
{
  RAPIDNET_LOG_INFO ("R4Eca0Del triggered");

  Ptr<Tuple> result = results;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("results")),
              VarExpr::New ("results_attr1")),
            VarExpr::New ("results_attr2")),
          VarExpr::New ("results_attr3")),
        VarExpr::New ("results_attr4")))));

  result = result->Project (
    RESULTSAUX,
    strlist ("results_attr1",
      "PID",
      "results_attr5",
      "results_attr6"),
    strlist ("resultsAux_attr1",
      "resultsAux_attr2",
      "resultsAux_attr3",
      "resultsAux_attr4"));

  Delete (result);
}

