/* A RapidNet application. Generated by RapidNet compiler. */

#include "dns-prov-comp-strawman.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::dnsprovcompstrawman;

const string DnsProvCompStrawman::ADDRESS_RECORD = "address_record";
const string DnsProvCompStrawman::EREQUESTCOUNT = "eRequestCount";
const string DnsProvCompStrawman::EREQUESTTEMP = "eRequestTemp";
const string DnsProvCompStrawman::ERESULT = "eResult";
const string DnsProvCompStrawman::ERESULTCOUNT = "eResultCount";
const string DnsProvCompStrawman::ERESULTTEMP = "eResultTemp";
const string DnsProvCompStrawman::NAME_SERVER = "name_server";
const string DnsProvCompStrawman::REQUEST = "request";
const string DnsProvCompStrawman::RESULT = "result";
const string DnsProvCompStrawman::RESULTAUX = "resultAux";
const string DnsProvCompStrawman::RULEEXEC = "ruleExec";
const string DnsProvCompStrawman::URL = "url";

NS_LOG_COMPONENT_DEFINE ("DnsProvCompStrawman");
NS_OBJECT_ENSURE_REGISTERED (DnsProvCompStrawman);

TypeId
DnsProvCompStrawman::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::dnsprovcompstrawman::DnsProvCompStrawman")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<DnsProvCompStrawman> ()
    ;
  return tid;
}

DnsProvCompStrawman::DnsProvCompStrawman()
{
  NS_LOG_FUNCTION_NOARGS ();
}

DnsProvCompStrawman::~DnsProvCompStrawman()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
DnsProvCompStrawman::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
DnsProvCompStrawman::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("DnsProvCompStrawman Application Started");
}

void
DnsProvCompStrawman::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("DnsProvCompStrawman Application Stopped");
}

void
DnsProvCompStrawman::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ADDRESS_RECORD, attrdeflist (
    attrdef ("address_record_attr1", IPV4),
    attrdef ("address_record_attr2", STR),
    attrdef ("address_record_attr3", IPV4)));

  AddRelationWithKeys (NAME_SERVER, attrdeflist (
    attrdef ("name_server_attr1", IPV4),
    attrdef ("name_server_attr2", STR),
    attrdef ("name_server_attr3", STR)));

  AddRelationWithKeys (RESULT, attrdeflist (
    attrdef ("result_attr1", IPV4),
    attrdef ("result_attr2", STR),
    attrdef ("result_attr3", IPV4)));

  AddRelationWithKeys (RESULTAUX, attrdeflist (
    attrdef ("resultAux_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr4", LIST)));

  AddRelationWithKeys (URL, attrdeflist (
    attrdef ("url_attr1", IPV4),
    attrdef ("url_attr2", STR),
    attrdef ("url_attr3", IPV4)));

}

void
DnsProvCompStrawman::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, URL))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTCOUNT))
    {
      Prov_r1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r1_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      Prov_r2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      Prov_r3_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMP))
    {
      Prov_r3_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTCOUNT))
    {
      Prov_r3_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMP))
    {
      Prov_r3_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULT))
    {
      Prov_r3_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULT))
    {
      Prov_r3_6_eca (tuple);
    }
}

void
DnsProvCompStrawman::Prov_r1_1Eca0Ins (Ptr<Tuple> url)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<Tuple> result = url;

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("url")),
            VarExpr::New ("url_attr1")),
          VarExpr::New ("url_attr2")),
        VarExpr::New ("url_attr3")))));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("HashList",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("url_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "url_attr1",
      "url_attr2",
      "url_attr3",
      "RID",
      "R",
      "List",
      "HashList",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      RN_DEST));

  Send (result);
}

void
DnsProvCompStrawman::Prov_r1_2_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eRequestTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("eRequestTemp_attr7", "eRequestTemp_attr6", "eRequestTemp_attr5", "eRequestTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eRequestTemp);

  result = result->Project (
    EREQUESTCOUNT,
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "count"),
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4",
      "eRequestCount_attr5"));

  SendLocal (result);
}

void
DnsProvCompStrawman::Prov_r1_3_eca (Ptr<Tuple> eRequestCount)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_eca triggered");

  Ptr<Tuple> result = eRequestCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eRequestCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
DnsProvCompStrawman::Prov_r1_4_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_eca triggered");

  Ptr<Tuple> result = eRequestTemp;

  result->Assign (Assignor::New ("Hash",
    FAppend::New (
      VarExpr::New ("eRequestTemp_attr5"))));

  result->Assign (Assignor::New ("NewHashList",
    FConcat::New (
      VarExpr::New ("eRequestTemp_attr8"),
      VarExpr::New ("Hash"))));

  result = result->Project (
    REQUEST,
    strlist ("eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "NewHashList",
      "eRequestTemp_attr2"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      RN_DEST));

  Send (result);
}

void
DnsProvCompStrawman::Prov_r2_1_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("request_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "request_attr2",
      "request_attr3",
      "RID",
      "R",
      "List",
      "request_attr4",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      RN_DEST));

  Send (result);
}

void
DnsProvCompStrawman::Prov_r3_1_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("request")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("request_attr2")),
        VarExpr::New ("request_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("request_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    ERESULTTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "request_attr2",
      "request_attr3",
      "RID",
      "R",
      "List",
      "request_attr4",
      "RLOC"),
    strlist ("eResultTemp_attr1",
      "eResultTemp_attr2",
      "eResultTemp_attr3",
      "eResultTemp_attr4",
      "eResultTemp_attr5",
      "eResultTemp_attr6",
      "eResultTemp_attr7",
      "eResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
DnsProvCompStrawman::Prov_r3_2_eca (Ptr<Tuple> eResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eResultTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("eResultTemp_attr7", "eResultTemp_attr6", "eResultTemp_attr5", "eResultTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eResultTemp);

  result = result->Project (
    ERESULTCOUNT,
    strlist ("eResultTemp_attr1",
      "eResultTemp_attr5",
      "eResultTemp_attr6",
      "eResultTemp_attr7",
      "count"),
    strlist ("eResultCount_attr1",
      "eResultCount_attr2",
      "eResultCount_attr3",
      "eResultCount_attr4",
      "eResultCount_attr5"));

  SendLocal (result);
}

void
DnsProvCompStrawman::Prov_r3_3_eca (Ptr<Tuple> eResultCount)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_eca triggered");

  Ptr<Tuple> result = eResultCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eResultCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("eResultCount_attr1",
      "eResultCount_attr2",
      "eResultCount_attr3",
      "eResultCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
DnsProvCompStrawman::Prov_r3_4_eca (Ptr<Tuple> eResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_eca triggered");

  Ptr<Tuple> result = eResultTemp;

  result->Assign (Assignor::New ("Hash",
    FAppend::New (
      VarExpr::New ("eResultTemp_attr5"))));

  result->Assign (Assignor::New ("NewHashList",
    FConcat::New (
      VarExpr::New ("eResultTemp_attr8"),
      VarExpr::New ("Hash"))));

  result = result->Project (
    ERESULT,
    strlist ("eResultTemp_attr2",
      "eResultTemp_attr3",
      "eResultTemp_attr4",
      "eResultTemp_attr5",
      "eResultTemp_attr1",
      "eResultTemp_attr8",
      "eResultTemp_attr2"),
    strlist ("eResult_attr1",
      "eResult_attr2",
      "eResult_attr3",
      "eResult_attr4",
      "eResult_attr5",
      "eResult_attr6",
      RN_DEST));

  Send (result);
}

void
DnsProvCompStrawman::Prov_r3_5_eca (Ptr<Tuple> eResult)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_eca triggered");

  Ptr<Tuple> result = eResult;

  result = result->Project (
    RESULT,
    strlist ("eResult_attr1",
      "eResult_attr2",
      "eResult_attr3"),
    strlist ("result_attr1",
      "result_attr2",
      "result_attr3"));

  Insert (result);
}

void
DnsProvCompStrawman::Prov_r3_6_eca (Ptr<Tuple> eResult)
{
  RAPIDNET_LOG_INFO ("Prov_r3_6_eca triggered");

  Ptr<Tuple> result = eResult;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("result")),
            VarExpr::New ("eResult_attr1")),
          VarExpr::New ("eResult_attr2")),
        VarExpr::New ("eResult_attr3")))));

  result = result->Project (
    RESULTAUX,
    strlist ("eResult_attr1",
      "PID",
      "eResult_attr6"),
    strlist ("resultAux_attr1",
      "resultAux_attr2",
      "resultAux_attr3"));

  Insert (result);
}

