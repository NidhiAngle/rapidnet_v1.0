/* A RapidNet application. Generated by RapidNet compiler. */

#include "firewall-weak.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::firewallweak;

const string FirewallWeak::CONNECTION = "connection";
const string FirewallWeak::LINK = "link";
const string FirewallWeak::PERFLOWRULE = "perFlowRule";
const string FirewallWeak::PKTFROMSWITCH = "pktFromSwitch";
const string FirewallWeak::PKTIN = "pktIn";
const string FirewallWeak::PKTRECEIVED = "pktReceived";
const string FirewallWeak::R2TRUSTEDCONTROLLERMEMORYSEND = "r2trustedControllerMemorysend";
const string FirewallWeak::R5PERFLOWRULESEND = "r5perFlowRulesend";
const string FirewallWeak::TRUSTEDCONTROLLERMEMORY = "trustedControllerMemory";
const string FirewallWeak::TRUSTEDCONTROLLERMEMORYDELETE = "trustedControllerMemoryDelete";

NS_LOG_COMPONENT_DEFINE ("FirewallWeak");
NS_OBJECT_ENSURE_REGISTERED (FirewallWeak);

TypeId
FirewallWeak::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::firewallweak::FirewallWeak")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<FirewallWeak> ()
    ;
  return tid;
}

FirewallWeak::FirewallWeak()
{
  NS_LOG_FUNCTION_NOARGS ();
}

FirewallWeak::~FirewallWeak()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
FirewallWeak::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
FirewallWeak::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("FirewallWeak Application Started");
}

void
FirewallWeak::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("FirewallWeak Application Stopped");
}

void
FirewallWeak::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (CONNECTION, attrdeflist (
    attrdef ("connection_attr1", IPV4)));

  AddRelationWithKeys (PERFLOWRULE, attrdeflist (
    attrdef ("perFlowRule_attr1", IPV4),
    attrdef ("perFlowRule_attr2", IPV4),
    attrdef ("perFlowRule_attr3", INT32),
    attrdef ("perFlowRule_attr4", IPV4),
    attrdef ("perFlowRule_attr5", INT32)));

  AddRelationWithKeys (PKTIN, attrdeflist (
    attrdef ("pktIn_attr1", IPV4),
    attrdef ("pktIn_attr2", IPV4),
    attrdef ("pktIn_attr3", INT32),
    attrdef ("pktIn_attr4", IPV4)));

  AddRelationWithKeys (TRUSTEDCONTROLLERMEMORY, attrdeflist (
    attrdef ("trustedControllerMemory_attr2", IPV4),
    attrdef ("trustedControllerMemory_attr3", IPV4)));

}

void
FirewallWeak::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, LINK))
    {
      R1_eca (tuple);
    }
  if (IsRecvEvent (tuple, R2TRUSTEDCONTROLLERMEMORYSEND))
    {
      R2Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, TRUSTEDCONTROLLERMEMORYDELETE))
    {
      R2Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, PKTIN))
    {
      R2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, PKTIN))
    {
      R2Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, CONNECTION))
    {
      R2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CONNECTION))
    {
      R2Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, LINK))
    {
      R3_eca (tuple);
    }
  if (IsInsertEvent (tuple, PKTIN))
    {
      R4Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, CONNECTION))
    {
      R4Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, R5PERFLOWRULESEND))
    {
      R5ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, PKTFROMSWITCH))
    {
      R5_eca (tuple);
    }
}

void
FirewallWeak::R1_eca (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PKTIN)->Join (
    link,
    strlist ("pktIn_attr4", "pktIn_attr1"),
    strlist ("link_attr2", "link_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktIn_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    PKTRECEIVED,
    strlist ("link_attr2",
      "link_attr3",
      "pktIn_attr2",
      "pktIn_attr3",
      "link_attr1",
      "link_attr2"),
    strlist ("pktReceived_attr1",
      "pktReceived_attr2",
      "pktReceived_attr3",
      "pktReceived_attr4",
      "pktReceived_attr5",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R2Eca0RemoteIns (Ptr<Tuple> r2trustedControllerMemorysend)
{
  RAPIDNET_LOG_INFO ("R2Eca0RemoteIns triggered");

  Ptr<Tuple> result = r2trustedControllerMemorysend;

  result = result->Project (
    TRUSTEDCONTROLLERMEMORY,
    strlist ("r2trustedControllerMemorysend_attr1",
      "r2trustedControllerMemorysend_attr2",
      "r2trustedControllerMemorysend_attr3"),
    strlist ("trustedControllerMemory_attr1",
      "trustedControllerMemory_attr2",
      "trustedControllerMemory_attr3"));

  Insert (result);
}

void
FirewallWeak::R2Eca0RemoteDel (Ptr<Tuple> trustedControllerMemoryDelete)
{
  RAPIDNET_LOG_INFO ("R2Eca0RemoteDel triggered");

  Ptr<Tuple> result = trustedControllerMemoryDelete;

  result = result->Project (
    TRUSTEDCONTROLLERMEMORY,
    strlist ("trustedControllerMemoryDelete_attr1",
      "trustedControllerMemoryDelete_attr2",
      "trustedControllerMemoryDelete_attr3"),
    strlist ("trustedControllerMemory_attr1",
      "trustedControllerMemory_attr2",
      "trustedControllerMemory_attr3"));

  Delete (result);
}

void
FirewallWeak::R2Eca0Ins (Ptr<Tuple> pktIn)
{
  RAPIDNET_LOG_INFO ("R2Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CONNECTION)->Join (
    pktIn,
    strlist ("connection_attr1"),
    strlist ("pktIn_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktIn_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    R2TRUSTEDCONTROLLERMEMORYSEND,
    strlist ("connection_attr2",
      "pktIn_attr1",
      "pktIn_attr4",
      "connection_attr2"),
    strlist ("r2trustedControllerMemorysend_attr1",
      "r2trustedControllerMemorysend_attr2",
      "r2trustedControllerMemorysend_attr3",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R2Eca0Del (Ptr<Tuple> pktIn)
{
  RAPIDNET_LOG_INFO ("R2Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CONNECTION)->Join (
    pktIn,
    strlist ("connection_attr1"),
    strlist ("pktIn_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktIn_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    TRUSTEDCONTROLLERMEMORYDELETE,
    strlist ("connection_attr2",
      "pktIn_attr1",
      "pktIn_attr4",
      "connection_attr2"),
    strlist ("trustedControllerMemoryDelete_attr1",
      "trustedControllerMemoryDelete_attr2",
      "trustedControllerMemoryDelete_attr3",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R2Eca1Ins (Ptr<Tuple> connection)
{
  RAPIDNET_LOG_INFO ("R2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PKTIN)->Join (
    connection,
    strlist ("pktIn_attr1"),
    strlist ("connection_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktIn_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    R2TRUSTEDCONTROLLERMEMORYSEND,
    strlist ("connection_attr2",
      "connection_attr1",
      "pktIn_attr4",
      "connection_attr2"),
    strlist ("r2trustedControllerMemorysend_attr1",
      "r2trustedControllerMemorysend_attr2",
      "r2trustedControllerMemorysend_attr3",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R2Eca1Del (Ptr<Tuple> connection)
{
  RAPIDNET_LOG_INFO ("R2Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PKTIN)->Join (
    connection,
    strlist ("pktIn_attr1"),
    strlist ("connection_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktIn_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    TRUSTEDCONTROLLERMEMORYDELETE,
    strlist ("connection_attr2",
      "connection_attr1",
      "pktIn_attr4",
      "connection_attr2"),
    strlist ("trustedControllerMemoryDelete_attr1",
      "trustedControllerMemoryDelete_attr2",
      "trustedControllerMemoryDelete_attr3",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R3_eca (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PKTIN)->Join (
    link,
    strlist ("pktIn_attr4", "pktIn_attr1"),
    strlist ("link_attr2", "link_attr1"));

  result = GetRelation (PERFLOWRULE)->Join (
    result,
    strlist ("perFlowRule_attr4", "perFlowRule_attr3", "perFlowRule_attr2", "perFlowRule_attr1"),
    strlist ("link_attr2", "pktIn_attr3", "pktIn_attr2", "link_attr1"));

  result = result->Project (
    PKTRECEIVED,
    strlist ("link_attr2",
      "link_attr3",
      "pktIn_attr2",
      "pktIn_attr3",
      "link_attr1",
      "link_attr2"),
    strlist ("pktReceived_attr1",
      "pktReceived_attr2",
      "pktReceived_attr3",
      "pktReceived_attr4",
      "pktReceived_attr5",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R4Eca0Ins (Ptr<Tuple> pktIn)
{
  RAPIDNET_LOG_INFO ("R4Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CONNECTION)->Join (
    pktIn,
    strlist ("connection_attr1"),
    strlist ("pktIn_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktIn_attr3"),
      ValueExpr::New (Int32Value::New (2)))));

  result = result->Project (
    PKTFROMSWITCH,
    strlist ("connection_attr2",
      "pktIn_attr1",
      "pktIn_attr2",
      "pktIn_attr3",
      "pktIn_attr4",
      "connection_attr2"),
    strlist ("pktFromSwitch_attr1",
      "pktFromSwitch_attr2",
      "pktFromSwitch_attr3",
      "pktFromSwitch_attr4",
      "pktFromSwitch_attr5",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R4Eca1Ins (Ptr<Tuple> connection)
{
  RAPIDNET_LOG_INFO ("R4Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PKTIN)->Join (
    connection,
    strlist ("pktIn_attr1"),
    strlist ("connection_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktIn_attr3"),
      ValueExpr::New (Int32Value::New (2)))));

  result = result->Project (
    PKTFROMSWITCH,
    strlist ("connection_attr2",
      "connection_attr1",
      "pktIn_attr2",
      "pktIn_attr3",
      "pktIn_attr4",
      "connection_attr2"),
    strlist ("pktFromSwitch_attr1",
      "pktFromSwitch_attr2",
      "pktFromSwitch_attr3",
      "pktFromSwitch_attr4",
      "pktFromSwitch_attr5",
      RN_DEST));

  Send (result);
}

void
FirewallWeak::R5ECAMat (Ptr<Tuple> r5perFlowRulesend)
{
  RAPIDNET_LOG_INFO ("R5ECAMat triggered");

  Ptr<Tuple> result = r5perFlowRulesend;

  result = result->Project (
    PERFLOWRULE,
    strlist ("r5perFlowRulesend_attr1",
      "r5perFlowRulesend_attr2",
      "r5perFlowRulesend_attr3",
      "r5perFlowRulesend_attr4"),
    strlist ("perFlowRule_attr1",
      "perFlowRule_attr2",
      "perFlowRule_attr3",
      "perFlowRule_attr4"));

  Insert (result);
}

void
FirewallWeak::R5_eca (Ptr<Tuple> pktFromSwitch)
{
  RAPIDNET_LOG_INFO ("R5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTEDCONTROLLERMEMORY)->Join (
    pktFromSwitch,
    strlist ("trustedControllerMemory_attr1", "trustedControllerMemory_attr3", "trustedControllerMemory_attr2"),
    strlist ("pktFromSwitch_attr1", "pktFromSwitch_attr3", "pktFromSwitch_attr2"));

  result->Assign (Assignor::New ("Tport",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pktFromSwitch_attr4"),
      ValueExpr::New (Int32Value::New (2)))));

  result = result->Project (
    R5PERFLOWRULESEND,
    strlist ("pktFromSwitch_attr2",
      "pktFromSwitch_attr3",
      "pktFromSwitch_attr4",
      "pktFromSwitch_attr5",
      "pktFromSwitch_attr2"),
    strlist ("r5perFlowRulesend_attr1",
      "r5perFlowRulesend_attr2",
      "r5perFlowRulesend_attr3",
      "r5perFlowRulesend_attr4",
      RN_DEST));

  Send (result);
}

