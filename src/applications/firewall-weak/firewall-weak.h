/* A RapidNet application. Generated by RapidNet compiler. */

#ifndef FIREWALLWEAK_H
#define FIREWALLWEAK_H

#include <string>
#include <iostream>
#include "ns3/ptr.h"
#include "ns3/event-id.h"
#include "ns3/ipv4-address.h"
#include "ns3/rapidnet-header.h"
#include "ns3/relation-base.h"
#include "ns3/database.h"
#include "ns3/rapidnet-application-base.h"
#include "ns3/aggregator.h"
#include "ns3/aggwrap.h"

using namespace std;
using namespace ns3;

namespace ns3 {

class Socket;
class Packet;

namespace rapidnet {
namespace firewallweak {

class FirewallWeak : public RapidNetApplicationBase
{
public:
  static const string CONNECTION;
  static const string LINK;
  static const string PERFLOWRULE;
  static const string PKTFROMSWITCH;
  static const string PKTIN;
  static const string PKTRECEIVED;
  static const string R2TRUSTEDCONTROLLERMEMORYSEND;
  static const string R5PERFLOWRULESEND;
  static const string TRUSTEDCONTROLLERMEMORY;
  static const string TRUSTEDCONTROLLERMEMORYDELETE;

  static TypeId GetTypeId (void);

  FirewallWeak ();

  virtual ~FirewallWeak ();

protected:

  virtual void DoDispose (void);

  virtual void StartApplication (void);

  virtual void StopApplication (void);

  virtual void InitDatabase (void);

  virtual void DemuxRecv (Ptr<Tuple> tuple);

  virtual void R1_eca (Ptr<Tuple> link);

  virtual void R2Eca0RemoteIns (Ptr<Tuple> r2trustedControllerMemorysend);

  virtual void R2Eca0RemoteDel (Ptr<Tuple> trustedControllerMemoryDelete);

  virtual void R2Eca0Ins (Ptr<Tuple> pktIn);

  virtual void R2Eca0Del (Ptr<Tuple> pktIn);

  virtual void R2Eca1Ins (Ptr<Tuple> connection);

  virtual void R2Eca1Del (Ptr<Tuple> connection);

  virtual void R3_eca (Ptr<Tuple> link);

  virtual void R4Eca0Ins (Ptr<Tuple> pktIn);

  virtual void R4Eca1Ins (Ptr<Tuple> connection);

  virtual void R5ECAMat (Ptr<Tuple> r5perFlowRulesend);

  virtual void R5_eca (Ptr<Tuple> pktFromSwitch);

};

} // namespace firewallweak
} // namespace rapidnet
} // namespace ns3

#endif // FIREWALLWEAK_H
