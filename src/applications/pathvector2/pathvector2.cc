/* A RapidNet application. Generated by RapidNet compiler. */

#include "pathvector2.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pathvector2;

const string Pathvector2::BESTPATH = "bestPath";
const string Pathvector2::LINK = "link";
const string Pathvector2::LINK1 = "link1";
const string Pathvector2::PATH = "path";
const string Pathvector2::R2LOCAL2PATHSEND = "r2Local2pathsend";
const string Pathvector2::R2LINK1Z = "r2link1Z";

NS_LOG_COMPONENT_DEFINE ("Pathvector2");
NS_OBJECT_ENSURE_REGISTERED (Pathvector2);

TypeId
Pathvector2::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pathvector2::Pathvector2")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Pathvector2> ()
    ;
  return tid;
}

Pathvector2::Pathvector2()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Pathvector2::~Pathvector2()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Pathvector2::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Pathvector2::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Pathvector2 Application Started");
}

void
Pathvector2::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Pathvector2 Application Stopped");
}

void
Pathvector2::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (BESTPATH, attrdeflist (
    attrdef ("bestPath_attr2", IPV4)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PATH, attrdeflist (
    attrdef ("path_attr4", LIST)));

  m_aggr_bestpathMinC = AggrMin::New (BESTPATH,
    this,
    attrdeflist (
      attrdeftype ("bestPath_attr1", ANYTYPE),
      attrdeftype ("bestPath_attr2", ANYTYPE),
      attrdeftype ("bestPath_attr3", ANYTYPE),
      attrdeftype ("bestPath_attr4", ANYTYPE)),
    3);

}

void
Pathvector2::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LINK))
    {
      R1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      R1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, LINK1))
    {
      R2Local1_eca (tuple);
    }
  if (IsRecvEvent (tuple, R2LOCAL2PATHSEND))
    {
      R2Local2ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, R2LINK1Z))
    {
      R2Local2_eca (tuple);
    }
  if (IsInsertEvent (tuple, PATH))
    {
      R3eca (tuple);
    }
  if (IsDeleteEvent (tuple, PATH))
    {
      R3eca2 (tuple);
    }
}

void
Pathvector2::R1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("P2"))));

  result = result->Project (
    PATH,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "P"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"));

  Insert (result);
}

void
Pathvector2::R1Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R1Eca0Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("P2"))));

  result = result->Project (
    PATH,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "P"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"));

  Delete (result);
}

void
Pathvector2::R2Local1_eca (Ptr<Tuple> link1)
{
  RAPIDNET_LOG_INFO ("R2Local1_eca triggered");

  Ptr<Tuple> result = link1;

  result = result->Project (
    R2LINK1Z,
    strlist ("link1_attr1",
      "link1_attr2",
      "link1_attr3",
      "link1_attr2"),
    strlist ("r2link1Z_attr1",
      "r2link1Z_attr2",
      "r2link1Z_attr3",
      RN_DEST));

  Send (result);
}

void
Pathvector2::R2Local2ECAMat (Ptr<Tuple> r2Local2pathsend)
{
  RAPIDNET_LOG_INFO ("R2Local2ECAMat triggered");

  Ptr<Tuple> result = r2Local2pathsend;

  result = result->Project (
    PATH,
    strlist ("r2Local2pathsend_attr1",
      "r2Local2pathsend_attr2",
      "r2Local2pathsend_attr3",
      "r2Local2pathsend_attr4"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"));

  Insert (result);
}

void
Pathvector2::R2Local2_eca (Ptr<Tuple> r2link1Z)
{
  RAPIDNET_LOG_INFO ("R2Local2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (BESTPATH)->Join (
    r2link1Z,
    strlist ("bestPath_attr1"),
    strlist ("r2link1Z_attr2"));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("r2link1Z_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("r2link1Z_attr1"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("r2link1Z_attr1")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    R2LOCAL2PATHSEND,
    strlist ("r2link1Z_attr1",
      "bestPath_attr2",
      "C",
      "P",
      "r2link1Z_attr1"),
    strlist ("r2Local2pathsend_attr1",
      "r2Local2pathsend_attr2",
      "r2Local2pathsend_attr3",
      "r2Local2pathsend_attr4",
      RN_DEST));

  Send (result);
}

void
Pathvector2::R3eca (Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO ("R3eca triggered");

  Ptr<Tuple> result = path;

  result = result->Project (
    BESTPATH,
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"),
    strlist ("bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4"));

  m_aggr_bestpathMinC->Insert (result);
}

void
Pathvector2::R3eca2 (Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO ("R3eca2 triggered");

  Ptr<Tuple> result = path;

  result = result->Project (
    BESTPATH,
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"),
    strlist ("bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4"));

  m_aggr_bestpathMinC->Delete (result);
}

