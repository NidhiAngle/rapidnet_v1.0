ECA Rule rr01Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rh1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)..
ECA Rule rr01Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rh1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)..
ECA Rule rr02Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rs1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)..
ECA Rule rr02Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rs1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)..
ECA Rule rr03Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rh2, RHead := recvPacket(Node,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);DstAdd==Node..
ECA Rule rr03Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rh2, RHead := recvPacket(Node,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);DstAdd==Node..
ECA Rule prov_r00Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_r00Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_r01Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule prov_r01Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule prov_r03Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_r03Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List := f_append(PID3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rs1_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rs1_3_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketCount(@RLOC, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule prov_rs1_4_eca ACTION_ADD<provLink(@RLOC, RID, CurCount, Preloc, PreRID, PreCount)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, PreCount := f_first(Tag), CurCount := PreCount+ 1, TempTag1 := f_removeFirst(Tag), Preloc := f_first(TempTag1), TempTag2 := f_removeFirst(TempTag1), PreRID := f_first(TempTag2).
ECA Rule prov_rs1_5_eca ACTION_REMOTE_SEND<packetProv(@Next, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, Count := f_first(Tag), NewCount := Count+ 1, NewCountlist := f_append(NewCount), TempNewTag1 := f_removeFirst(Tag), TempNewTag2 := f_removeFirst(TempNewTag1), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(RIDlist, TempNewTag3), TempNewTag5 := f_concat(Loclist, TempNewTag4), NewTag := f_concat(NewCountlist, TempNewTag5).
ECA Rule rs1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next).
ECA Rule prov_ri1Eca0Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, programID(@Node, DstAdd, ProgID), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri1Eca1Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<programID(@Node, DstAdd, ProgID)>, initPacket(@Node, SrcAdd, DstAdd, Data), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri2_eca ACTION_LOCAL_SEND<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, COUNT< * >)> :- EVENT_RECV<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, equiHashTable(@Node, DstAdd, PIDequi).
ECA Rule prov_ri3_eca ACTION_ADD<equiHashTable(@Node, DstAdd, PIDequi)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, PIDcount == 0.
ECA Rule rh1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, link(@Node, Next), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDcount != 0, PIDequiHash := f_append(PIDequi), PIDevHash := f_append(PIDev), ProgIDlist := f_append(ProgID), PIDHash1 := f_concat(PIDequiHash, PIDevHash), PIDHash := f_concat(PIDHash1, ProgIDlist).
ECA Rule prov_rh1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, link(@Node, Next), PIDcount == 0, PID := f_sha1((link+ Node)+ Next), List := f_append(PID), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), Equilist := f_append(PIDequi), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), Evlist := f_append(PIDev), ProgIDlist := f_append(ProgID), Count := 0, Countlist := f_append(Count), InitProvNode := Node, InitProvNodelist := f_append(InitProvNode), InitProvHash := f_sha1(NULL), InitProvHashlist := f_append(InitProvHash), TempTag1 := f_concat(Countlist, InitProvNodelist), TempTag2 := f_concat(TempTag1, InitProvHashlist), TempTag3 := f_concat(TempTag2, Equilist), TempTag4 := f_concat(TempTag3, Evlist), Tag := f_concat(TempTag4, ProgIDlist).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, DstAdd == Node, PID := f_sha1(NULL), List := f_append(PID), RLOC := Node, R := rh2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rh2_4_eca ACTION_ADD<provLink(@RLOC, RID, CurCount, Preloc, PreRID, PreCount)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, PreCount := f_first(Tag), CurCount := PreCount+ 1, TempTag1 := f_removeFirst(Tag), Preloc := f_first(TempTag1), TempTag2 := f_removeFirst(TempTag1), PreRID := f_first(TempTag2).
ECA Rule prov_rh2_5_eca ACTION_REMOTE_SEND<recvPacketProv(@Node, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, Count := f_first(Tag), NewCount := Count+ 1, NewCountlist := f_append(NewCount), TempNewTag1 := f_removeFirst(Tag), TempNewTag2 := f_removeFirst(TempNewTag1), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(RIDlist, TempNewTag3), TempNewTag5 := f_concat(Loclist, TempNewTag4), NewTag := f_concat(NewCountlist, TempNewTag5).
ECA Rule ro1_eca ACTION_ADD<provHashTable(@Node, EquiHash, ProgID, Loc, RID, Count)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, Count := f_first(Tag), RemainTag1 := f_removeFirst(Tag), Loc := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), RID := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), PIDequi := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), PIDev := f_first(RemainTag4), RemainTag5 := f_removeFirst(RemainTag4), ProgID := f_first(RemainTag5), EquiHash := f_sha1((+ ProgID)+ PIDequi).
ECA Rule ro2_eca ACTION_ADD<recvPacketRef(@Node, PID, EquiHash, PIDev)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), Count := f_first(Tag), RemainTag1 := f_removeFirst(Tag), Loc := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), RID := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), PIDequi := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), PIDev := f_first(RemainTag4), RemainTag5 := f_removeFirst(RemainTag4), ProgID := f_first(RemainTag5), EquiHash := f_sha1((+ ProgID)+ PIDequi).
ECA Rule ro3_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>.
ECA Rule rh2_eca ACTION_LOCAL_SEND<recvPacketNP(@Node, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, DstAdd == Node.
ECA Rule rho3_eca ACTION_ADD<recvPacketRef(@Node, PID, EquiHash, PIDev)> :- EVENT_RECV<recvPacketNP(@Node, SrcAdd, DstAdd, Data, PIDHash)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDequi := f_first(PIDHash), PIDHash1 := f_removeFirst(PIDHash), PIDev := f_first(PIDHash1), PIDHash2 := f_removeFirst(PIDHash1), ProgID := f_first(PIDHash2), EquiHash := f_sha1((+ ProgID)+ PIDequi).
ECA Rule rh04_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<recvPacketNP(@Node, SrcAdd, DstAdd, Data, PIDHash)>.
