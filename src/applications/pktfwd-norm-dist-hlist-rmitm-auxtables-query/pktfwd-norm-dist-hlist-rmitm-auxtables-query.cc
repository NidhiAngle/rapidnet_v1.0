/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-norm-dist-hlist-rmitm-auxtables-query.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdnormdisthlistrmitmauxtablesquery;

const string PktfwdNormDistHlistRmitmAuxtablesQuery::EPACKET = "epacket";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::EPACKETTEMP = "epacketTemp";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::ERECVPACKET = "erecvPacket";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::ERECVPACKETTEMP = "erecvPacketTemp";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::FLOWENTRY = "flowEntry";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::INITPACKET = "initPacket";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::LINK = "link";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::PACKET = "packet";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::PROV = "prov";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::PROVQUERY = "provQuery";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::PROVRESULT = "provResult";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::PROVSTR = "provStr";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::RQUERY = "rQuery";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::RRETURN = "rReturn";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::RRETURNSIG = "rReturnSig";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::RECORDRULE = "recordRule";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::RECVPACKET = "recvPacket";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::RULEEXEC = "ruleExec";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::RULEINFO = "ruleInfo";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::SLOWCHANGEQUERY = "slowChangeQuery";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::TQUERY = "tQuery";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::TRETURN = "tReturn";
const string PktfwdNormDistHlistRmitmAuxtablesQuery::TUPLEITR = "tupleItr";

NS_LOG_COMPONENT_DEFINE ("PktfwdNormDistHlistRmitmAuxtablesQuery");
NS_OBJECT_ENSURE_REGISTERED (PktfwdNormDistHlistRmitmAuxtablesQuery);

TypeId
PktfwdNormDistHlistRmitmAuxtablesQuery::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdnormdisthlistrmitmauxtablesquery::PktfwdNormDistHlistRmitmAuxtablesQuery")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdNormDistHlistRmitmAuxtablesQuery> ()
    ;
  return tid;
}

PktfwdNormDistHlistRmitmAuxtablesQuery::PktfwdNormDistHlistRmitmAuxtablesQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdNormDistHlistRmitmAuxtablesQuery::~PktfwdNormDistHlistRmitmAuxtablesQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormDistHlistRmitmAuxtablesQuery Application Started");
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormDistHlistRmitmAuxtablesQuery Application Stopped");
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", IPV4),
    attrdef ("prov_attr4", ID)));

  AddRelationWithKeys (PROVRESULT, attrdeflist (
    attrdef ("provResult_attr2", ID)));

  AddRelationWithKeys (PROVSTR, attrdeflist (
    attrdef ("provStr_attr2", ID)));

  AddRelationWithKeys (RECORDRULE, attrdeflist (
    attrdef ("recordRule_attr1", IPV4)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4),
    attrdef ("recvPacket_attr4", STR)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr2", ID),
    attrdef ("ruleExec_attr5", IPV4),
    attrdef ("ruleExec_attr6", ID)));

  AddRelationWithKeys (RULEINFO, attrdeflist (
    attrdef ("ruleInfo_attr2", STR)));

  AddRelationWithKeys (SLOWCHANGEQUERY, attrdeflist (
    attrdef ("slowChangeQuery_attr2", ID)));

}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, RECORDRULE))
    {
      Rr01Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECORDRULE))
    {
      Rr01Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, RECORDRULE))
    {
      Rr02Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECORDRULE))
    {
      Rr02Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, RECORDRULE))
    {
      Rr03Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECORDRULE))
    {
      Rr03Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_r00Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, INITPACKET))
    {
      Prov_r00Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_r01Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_r01Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      Prov_r03Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FLOWENTRY))
    {
      Prov_r03Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Prov_rs1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Prov_rs1_4_eca (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_rh1_1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      Prov_rh1_1Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_rh1_1Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Prov_rh2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKET))
    {
      Prov_rh2_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKET))
    {
      Prov_rh2_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Rqini_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqrec_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqsc1_eca (tuple);
    }
  if (IsInsertEvent (tuple, SLOWCHANGEQUERY))
    {
      Rqsc2Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, TUPLEITR))
    {
      Rqsc3_eca (tuple);
    }
  if (IsRecvEvent (tuple, TUPLEITR))
    {
      Rqsc4_eca (tuple);
    }
  if (IsRecvEvent (tuple, TQUERY))
    {
      Rqsc5_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqrt1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqrt2_eca (tuple);
    }
  if (IsRecvEvent (tuple, TRETURN))
    {
      Rqrt3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Rqrt4_eca (tuple);
    }
  if (IsInsertEvent (tuple, PROVRESULT))
    {
      Rqrt5Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, RRETURNSIG))
    {
      Rqrt6_eca (tuple);
    }
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rr01Eca0Ins (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr01Eca0Ins triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rr01Eca0Del (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr01Eca0Del triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Delete (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rr02Eca0Ins (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr02Eca0Ins triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rr02Eca0Del (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr02Eca0Del triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Delete (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rr03Eca0Ins (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr03Eca0Ins triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("recvPacket(Node,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);DstAdd==Node."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rr03Eca0Del (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr03Eca0Del triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("recvPacket(Node,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);DstAdd==Node."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Delete (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_r00Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_r00Eca0Ins triggered");

  Ptr<Tuple> result = initPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("initPacket")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("initPacket_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("initPacket_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("initPacket_attr3"))));

  result->Assign (Assignor::New ("TpStrList7",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result->Assign (Assignor::New ("TpStrList8",
    FAppend::New (
      VarExpr::New ("initPacket_attr4"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList7"),
      VarExpr::New ("TpStrList8"))));

  result = result->Project (
    PROVSTR,
    strlist ("initPacket_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_r00Eca0Del (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_r00Eca0Del triggered");

  Ptr<Tuple> result = initPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("initPacket")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("initPacket_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("initPacket_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("initPacket_attr3"))));

  result->Assign (Assignor::New ("TpStrList7",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result->Assign (Assignor::New ("TpStrList8",
    FAppend::New (
      VarExpr::New ("initPacket_attr4"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList7"),
      VarExpr::New ("TpStrList8"))));

  result = result->Project (
    PROVSTR,
    strlist ("initPacket_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Delete (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_r01Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r01Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("link")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result = result->Project (
    PROVSTR,
    strlist ("link_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_r01Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r01Eca0Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("link")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result = result->Project (
    PROVSTR,
    strlist ("link_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Delete (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_r03Eca0Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_r03Eca0Ins triggered");

  Ptr<Tuple> result = flowEntry;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("flowEntry_attr1")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("flowEntry")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("flowEntry_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("flowEntry_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("flowEntry_attr3"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result = result->Project (
    PROVSTR,
    strlist ("flowEntry_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_r03Eca0Del (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_r03Eca0Del triggered");

  Ptr<Tuple> result = flowEntry;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("flowEntry_attr1")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("flowEntry")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("flowEntry_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("flowEntry_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("flowEntry_attr3"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result = result->Project (
    PROVSTR,
    strlist ("flowEntry_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Delete (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rs1_1_eca (Ptr<Tuple> epacket)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    epacket,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("epacket_attr3", "epacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "epacket_attr1"));

  result->Assign (Assignor::New ("PIDpk",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("epacket_attr1")),
            VarExpr::New ("epacket_attr2")),
          VarExpr::New ("epacket_attr3")),
        VarExpr::New ("epacket_attr4")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("epacket_attr1")),
          VarExpr::New ("epacket_attr3")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("epacket_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List3"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("epacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("R"),
            VarExpr::New ("RLOC")),
          VarExpr::New ("List")),
        VarExpr::New ("PIDpk")))));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("epacket_attr5"))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("epacket_attr6"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "epacket_attr2",
      "epacket_attr3",
      "epacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rs1_2_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_2_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("Remainlist",
    FRemoveFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("Remainlist"))));

  result = result->Project (
    RULEEXEC,
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "PreLoc",
      "PreRID"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5",
      "ruleExec_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rs1_3_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_3_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result = result->Project (
    EPACKET,
    strlist ("epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr1",
      "epacketTemp_attr6",
      "epacketTemp_attr2"),
    strlist ("epacket_attr1",
      "epacket_attr2",
      "epacket_attr3",
      "epacket_attr4",
      "epacket_attr5",
      "epacket_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rs1_4_eca (Ptr<Tuple> epacket)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_4_eca triggered");

  Ptr<Tuple> result = epacket;

  result = result->Project (
    PACKET,
    strlist ("epacket_attr1",
      "epacket_attr2",
      "epacket_attr3",
      "epacket_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  SendLocal (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh1_1Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    initPacket,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("initPacket_attr3", "initPacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "initPacket_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List1",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("initPacket_attr1")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List4",
    FConcat::New (
      VarExpr::New ("List1"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List4"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh1_1Eca1Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    flowEntry,
    strlist ("initPacket_attr3", "initPacket_attr1"),
    strlist ("flowEntry_attr2", "flowEntry_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "flowEntry_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("flowEntry_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List1",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("flowEntry_attr1")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("flowEntry_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List4",
    FConcat::New (
      VarExpr::New ("List1"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List4"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("flowEntry_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("flowEntry_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "initPacket_attr2",
      "flowEntry_attr2",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh1_1Eca2Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    link,
    strlist ("initPacket_attr1"),
    strlist ("link_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("initPacket_attr3", "link_attr2", "link_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("link_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List1",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List4",
    FConcat::New (
      VarExpr::New ("List1"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List4"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "link_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh2_1_eca (Ptr<Tuple> epacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_1_eca triggered");

  Ptr<Tuple> result = epacket;

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("epacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("PIDpk",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("epacket_attr1")),
            VarExpr::New ("epacket_attr2")),
          VarExpr::New ("epacket_attr3")),
        VarExpr::New ("epacket_attr4")))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("R"),
            VarExpr::New ("RLOC")),
          VarExpr::New ("List")),
        VarExpr::New ("PIDpk")))));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("epacket_attr5"))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("epacket_attr6"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("epacket_attr3"),
      VarExpr::New ("epacket_attr1"))));

  result = result->Project (
    ERECVPACKETTEMP,
    strlist ("RLOC",
      "epacket_attr1",
      "epacket_attr2",
      "epacket_attr3",
      "epacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "erecvPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh2_2_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_2_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("Remainlist",
    FRemoveFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("Remainlist"))));

  result = result->Project (
    RULEEXEC,
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "PreLoc",
      "PreRID"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5",
      "ruleExec_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh2_3_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_3_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result = result->Project (
    ERECVPACKET,
    strlist ("erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2"),
    strlist ("erecvPacket_attr1",
      "erecvPacket_attr2",
      "erecvPacket_attr3",
      "erecvPacket_attr4",
      "erecvPacket_attr5",
      "erecvPacket_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh2_5_eca (Ptr<Tuple> erecvPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5_eca triggered");

  Ptr<Tuple> result = erecvPacket;

  result = result->Project (
    RECVPACKET,
    strlist ("erecvPacket_attr1",
      "erecvPacket_attr2",
      "erecvPacket_attr3",
      "erecvPacket_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Prov_rh2_4_eca (Ptr<Tuple> erecvPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_4_eca triggered");

  Ptr<Tuple> result = erecvPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("erecvPacket_attr1")),
            VarExpr::New ("erecvPacket_attr2")),
          VarExpr::New ("erecvPacket_attr3")),
        VarExpr::New ("erecvPacket_attr4")))));

  result = result->Project (
    PROV,
    strlist ("erecvPacket_attr1",
      "VID",
      "erecvPacket_attr6",
      "erecvPacket_attr5"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqini_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Rqini_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("provQuery_attr2")),
        VarExpr::New ("prov_attr4")))));

  result = result->Project (
    RQUERY,
    strlist ("prov_attr3",
      "NQID",
      "prov_attr4",
      "provQuery_attr4",
      "prov_attr3"),
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "rQuery_attr3",
      "rQuery_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqrec_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqrec_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    rQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("NNQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rQuery_attr2")),
        VarExpr::New ("ruleExec_attr6")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("ruleExec_attr6"),
      FSha1::New (
        ValueExpr::New (StrValue::New ("NULL"))))));

  result = result->Project (
    RQUERY,
    strlist ("ruleExec_attr5",
      "NNQID",
      "ruleExec_attr6",
      "rQuery_attr1",
      "ruleExec_attr5"),
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "rQuery_attr3",
      "rQuery_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqsc1_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqsc1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    rQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("TupleRet",
    VarExpr::New ("rQuery_attr1")));

  result = result->Project (
    SLOWCHANGEQUERY,
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "ruleExec_attr4",
      "TupleRet"),
    strlist ("slowChangeQuery_attr1",
      "slowChangeQuery_attr2",
      "slowChangeQuery_attr3",
      "slowChangeQuery_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqsc2Eca0Ins (Ptr<Tuple> slowChangeQuery)
{
  RAPIDNET_LOG_INFO ("Rqsc2Eca0Ins triggered");

  Ptr<Tuple> result = slowChangeQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    TUPLEITR,
    strlist ("slowChangeQuery_attr1",
      "slowChangeQuery_attr2",
      "N"),
    strlist ("tupleItr_attr1",
      "tupleItr_attr2",
      "tupleItr_attr3"));

  SendLocal (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqsc3_eca (Ptr<Tuple> tupleItr)
{
  RAPIDNET_LOG_INFO ("Rqsc3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SLOWCHANGEQUERY)->Join (
    tupleItr,
    strlist ("slowChangeQuery_attr2", "slowChangeQuery_attr1"),
    strlist ("tupleItr_attr2", "tupleItr_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("tupleItr_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("tupleItr_attr3"),
      FSize::New (
        VarExpr::New ("slowChangeQuery_attr3")))));

  result = result->Project (
    TUPLEITR,
    strlist ("tupleItr_attr1",
      "tupleItr_attr2",
      "N"),
    strlist ("tupleItr_attr1",
      "tupleItr_attr2",
      "tupleItr_attr3"));

  SendLocal (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqsc4_eca (Ptr<Tuple> tupleItr)
{
  RAPIDNET_LOG_INFO ("Rqsc4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SLOWCHANGEQUERY)->Join (
    tupleItr,
    strlist ("slowChangeQuery_attr2", "slowChangeQuery_attr1"),
    strlist ("tupleItr_attr2", "tupleItr_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("slowChangeQuery_attr3"),
      VarExpr::New ("tupleItr_attr3"))));

  result->Assign (Assignor::New ("NNQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("tupleItr_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    TQUERY,
    strlist ("tupleItr_attr1",
      "NNQID",
      "VID",
      "slowChangeQuery_attr4"),
    strlist ("tQuery_attr1",
      "tQuery_attr2",
      "tQuery_attr3",
      "tQuery_attr4"));

  SendLocal (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqsc5_eca (Ptr<Tuple> tQuery)
{
  RAPIDNET_LOG_INFO ("Rqsc5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVSTR)->Join (
    tQuery,
    strlist ("provStr_attr2", "provStr_attr1"),
    strlist ("tQuery_attr3", "tQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdbTp::New (
      VarExpr::New ("provStr_attr3"),
      VarExpr::New ("tQuery_attr1"))));

  result = result->Project (
    TRETURN,
    strlist ("tQuery_attr4",
      "tQuery_attr2",
      "tQuery_attr3",
      "Prov",
      "tQuery_attr4"),
    strlist ("tReturn_attr1",
      "tReturn_attr2",
      "tReturn_attr3",
      "tReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqrt1_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqrt1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    rQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("BodyNum",
    FSize::New (
      VarExpr::New ("ruleExec_attr4"))));

  result->Assign (Assignor::New ("Buff",
    FEmpty::New (
)));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("ruleExec_attr6"),
      FSha1::New (
        ValueExpr::New (StrValue::New ("NULL"))))));

  result = result->Project (
    PROVRESULT,
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "rQuery_attr3",
      "Buff",
      "ruleExec_attr3",
      "BodyNum",
      "rQuery_attr4"),
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqrt2_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqrt2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    rQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("BodyNum",
    Operation::New (RN_PLUS,
      FSize::New (
        VarExpr::New ("ruleExec_attr4")),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Buff",
    FEmpty::New (
)));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("ruleExec_attr6"),
      FSha1::New (
        ValueExpr::New (StrValue::New ("NULL"))))));

  result = result->Project (
    PROVRESULT,
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "rQuery_attr3",
      "Buff",
      "ruleExec_attr3",
      "BodyNum",
      "rQuery_attr4"),
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqrt3_eca (Ptr<Tuple> tReturn)
{
  RAPIDNET_LOG_INFO ("Rqrt3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVRESULT)->Join (
    tReturn,
    strlist ("provResult_attr1"),
    strlist ("tReturn_attr1"));

  result->Assign (Assignor::New ("ProvBuff",
    FAppend::New (
      VarExpr::New ("tReturn_attr4"))));

  result->Assign (Assignor::New ("NewBuff",
    FConcat::New (
      VarExpr::New ("provResult_attr4"),
      VarExpr::New ("ProvBuff"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("tReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("provResult_attr2")),
          VarExpr::New ("tReturn_attr3"))))));

  result = result->Project (
    PROVRESULT,
    strlist ("tReturn_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "NewBuff",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"),
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqrt4_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Rqrt4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVRESULT)->Join (
    rReturn,
    strlist ("provResult_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("ProvBuff",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("NewBuff",
    FConcat::New (
      VarExpr::New ("provResult_attr4"),
      VarExpr::New ("ProvBuff"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("provResult_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PROVRESULT,
    strlist ("rReturn_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "NewBuff",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"),
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqrt5Eca0Ins (Ptr<Tuple> provResult)
{
  RAPIDNET_LOG_INFO ("Rqrt5Eca0Ins triggered");

  Ptr<Tuple> result = provResult;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("provResult_attr4")),
      VarExpr::New ("provResult_attr6"))));

  result = result->Project (
    RRETURNSIG,
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"),
    strlist ("rReturnSig_attr1",
      "rReturnSig_attr2",
      "rReturnSig_attr3",
      "rReturnSig_attr4",
      "rReturnSig_attr5",
      "rReturnSig_attr6",
      "rReturnSig_attr7"));

  SendLocal (result);
}

void
PktfwdNormDistHlistRmitmAuxtablesQuery::Rqrt6_eca (Ptr<Tuple> rReturnSig)
{
  RAPIDNET_LOG_INFO ("Rqrt6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEINFO)->Join (
    rReturnSig,
    strlist ("ruleInfo_attr2", "ruleInfo_attr1"),
    strlist ("rReturnSig_attr5", "rReturnSig_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRuleItm::New (
      VarExpr::New ("rReturnSig_attr4"),
      VarExpr::New ("rReturnSig_attr1"),
      VarExpr::New ("rReturnSig_attr5"),
      VarExpr::New ("ruleInfo_attr3"),
      VarExpr::New ("ruleInfo_attr4"))));

  result = result->Project (
    RRETURN,
    strlist ("rReturnSig_attr7",
      "rReturnSig_attr2",
      "rReturnSig_attr3",
      "Prov",
      "rReturnSig_attr7"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

