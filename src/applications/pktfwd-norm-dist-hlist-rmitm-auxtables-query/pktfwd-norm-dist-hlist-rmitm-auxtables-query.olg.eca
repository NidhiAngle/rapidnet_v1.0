ECA Rule rr01Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rh1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)..
ECA Rule rr01Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rh1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)..
ECA Rule rr02Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rs1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)..
ECA Rule rr02Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rs1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)..
ECA Rule rr03Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rh2, RHead := recvPacket(Node,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);DstAdd==Node..
ECA Rule rr03Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rh2, RHead := recvPacket(Node,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);DstAdd==Node..
ECA Rule prov_r00Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_r00Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_r01Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule prov_r01Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule prov_r03Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_r03Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_RECV<epacket(@Node, SrcAdd, DstAdd, Data, PreLoc, PreRID)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PIDpk := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List3 := f_append(PID3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List3, List4), RLOC := Node, R := rs1, RID := f_sha1(((R+ RLOC)+ List)+ PIDpk), PreLoclist := f_append(PreLoc), PreRIDlist := f_append(PreRID), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rs1_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List, PreLoc, PreRID)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>, PreLoc := f_first(PreInfolist), Remainlist := f_removeFirst(PreInfolist), PreRID := f_first(Remainlist).
ECA Rule prov_rs1_3_eca ACTION_REMOTE_SEND<epacket(@Next, SrcAdd, DstAdd, Data, RLOC, RID)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>.
ECA Rule prov_rs1_4_eca ACTION_LOCAL_SEND<packet(@Next, SrcAdd, DstAdd, Data)> :- EVENT_RECV<epacket(@Next, SrcAdd, DstAdd, Data, RLOC, RID)>.
ECA Rule prov_rh1_1Eca0Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID1 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List1 := f_append(PID1), PID2 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List2 := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List4 := f_concat(List1, List2), List := f_concat(List4, List3), PreLoc := Node, PreLoclist := f_append(PreLoc), PreRID := f_sha1(NULL), PreRIDlist := f_append(PreRID), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rh1_1Eca1Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_INSERT<flowEntry(@Node, DstAdd, Next)>, initPacket(@Node, SrcAdd, DstAdd, Data), link(@Node, Next), PID1 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List1 := f_append(PID1), PID2 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List2 := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List4 := f_concat(List1, List2), List := f_concat(List4, List3), PreLoc := Node, PreLoclist := f_append(PreLoc), PreRID := f_sha1(NULL), PreRIDlist := f_append(PreRID), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rh1_1Eca2Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_INSERT<link(@Node, Next)>, initPacket(@Node, SrcAdd, DstAdd, Data), flowEntry(@Node, DstAdd, Next), PID1 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List1 := f_append(PID1), PID2 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List2 := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List4 := f_concat(List1, List2), List := f_concat(List4, List3), PreLoc := Node, PreLoclist := f_append(PreLoc), PreRID := f_sha1(NULL), PreRIDlist := f_append(PreRID), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_RECV<epacket(@Node, SrcAdd, DstAdd, Data, PreLoc, PreRID)>, DstAdd == Node, List := f_empty(), RLOC := Node, R := rh2, PIDpk := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), RID := f_sha1(((R+ RLOC)+ List)+ PIDpk), PreLoclist := f_append(PreLoc), PreRIDlist := f_append(PreRID), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rh2_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List, PreLoc, PreRID)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>, PreLoc := f_first(PreInfolist), Remainlist := f_removeFirst(PreInfolist), PreRID := f_first(Remainlist).
ECA Rule prov_rh2_3_eca ACTION_REMOTE_SEND<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>.
ECA Rule prov_rh2_5_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>.
ECA Rule prov_rh2_4_eca ACTION_ADD<prov(@Node, VID, RLOC, RID)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule rqini_eca ACTION_REMOTE_SEND<rQuery(@RLoc, NQID, RID, Ret)> :- EVENT_RECV<provQuery(@X, QID, PID, Ret)>, prov(@X, PID, RLoc, RID), NQID := f_sha1((+ QID)+ RID).
ECA Rule rqrec_eca ACTION_REMOTE_SEND<rQuery(@Preloc, NNQID, PreRID, X)> :- EVENT_RECV<rQuery(@X, NQID, RID, Ret)>, ruleExec(@X, RID, R, List, Preloc, PreRID), PreRID != f_sha1(NULL), NNQID := f_sha1((+ NQID)+ PreRID).
ECA Rule rqsc1_eca ACTION_ADD<slowChangeQuery(@X, NQID, List, TupleRet)> :- EVENT_RECV<rQuery(@X, NQID, RID, Ret)>, ruleExec(@X, RID, R, List, PreLoc, PreRID), TupleRet := X.
ECA Rule rqsc2Eca0Ins ACTION_LOCAL_SEND<tupleItr(@X, NQID, N)> :- EVENT_INSERT<slowChangeQuery(@X, NQID, List, TupleRet)>, N := 1.
ECA Rule rqsc3_eca ACTION_LOCAL_SEND<tupleItr(@X, NQID, N)> :- EVENT_RECV<tupleItr(@X, NQID, N1)>, slowChangeQuery(@X, NQID, List, TupleRet), N1 < f_size(List), N := N1+ 1.
ECA Rule rqsc4_eca ACTION_LOCAL_SEND<tQuery(@X, NNQID, VID, TupleRet)> :- EVENT_RECV<tupleItr(@X, NQID, N)>, slowChangeQuery(@X, NQID, List, TupleRet), VID := f_item(List, N), NNQID := f_sha1((+ NQID)+ VID).
ECA Rule rqsc5_eca ACTION_REMOTE_SEND<tReturn(@TupleRet, NNQID, VID, Prov)> :- EVENT_RECV<tQuery(@X, NNQID, VID, TupleRet)>, provStr(@X, VID, TpStrList), Prov := f_pEDBTP(TpStrList, X).
ECA Rule rqrt1_eca ACTION_ADD<provResult(@X, NQID, RID, Buff, R, BodyNum, Ret)> :- EVENT_RECV<rQuery(@X, NQID, RID, Ret)>, ruleExec(@X, RID, R, List, PreLoc, PreRID), PreRID == f_sha1(NULL), BodyNum := f_size(List), Buff := f_empty().
ECA Rule rqrt2_eca ACTION_ADD<provResult(@X, NQID, RID, Buff, R, BodyNum, Ret)> :- EVENT_RECV<rQuery(@X, NQID, RID, Ret)>, ruleExec(@X, RID, R, List, PreLoc, PreRID), PreRID != f_sha1(NULL), BodyNum := f_size(List)+ 1, Buff := f_empty().
ECA Rule rqrt3_eca ACTION_ADD<provResult(@X, NQID, RID, NewBuff, R, BodyNum, Ret)> :- EVENT_RECV<tReturn(@X, NNQID, VID, Prov)>, provResult(@X, NQID, RID, Buff, R, BodyNum, Ret), NNQID == f_sha1((+ NQID)+ VID), ProvBuff := f_append(Prov), NewBuff := f_concat(Buff, ProvBuff).
ECA Rule rqrt4_eca ACTION_ADD<provResult(@X, NQID, RID, NewBuff, R, BodyNum, Ret)> :- EVENT_RECV<rReturn(@X, NNQID, PreRID, Prov)>, provResult(@X, NQID, RID, Buff, R, BodyNum, Ret), NNQID == f_sha1((+ NQID)+ PreRID), ProvBuff := f_append(Prov), NewBuff := f_concat(Buff, ProvBuff).
ECA Rule rqrt5Eca0Ins ACTION_LOCAL_SEND<rReturnSig(@X, NQID, RID, Buff, R, BodyNum, Ret)> :- EVENT_INSERT<provResult(@X, NQID, RID, Buff, R, BodyNum, Ret)>, f_size(Buff) == BodyNum.
ECA Rule rqrt6_eca ACTION_REMOTE_SEND<rReturn(@Ret, NQID, RID, Prov)> :- EVENT_RECV<rReturnSig(@X, NQID, RID, Buff, R, BodyNum, Ret)>, ruleInfo(@X, R, RHead, RBody), Prov := f_pRULEITM(Buff, X, R, RHead, RBody).
