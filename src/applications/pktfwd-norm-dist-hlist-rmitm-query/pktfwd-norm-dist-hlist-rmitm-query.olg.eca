ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PreLoc, PreRID)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1((R+ RLOC)+ List), PreLoclist := f_append(PreLoc), PreRIDlist := f_append(PreRID), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rs1_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List, PreLoc, PreRID)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>, PreLoc := f_first(PreInfolist), Remainlist := f_removeFirst(PreInfolist), PreRID := f_first(Remainlist).
ECA Rule prov_rs1_3_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, RLOC, RID)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>.
ECA Rule prov_rh1_1Eca0Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, link(@Node, Next), PID2 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1((linkhr+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), PreLoc := f_sha1(NULL), PreLoclist := f_append(PreLoc), PreRID := f_sha1(NULL), PreRIDlist := f_append(PreRID), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rh1_1Eca1Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_INSERT<link(@Node, Next)>, initPacket(@Node, SrcAdd, DstAdd, Data), PID2 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1((linkhr+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), PreLoc := f_sha1(NULL), PreLoclist := f_append(PreLoc), PreRID := f_sha1(NULL), PreRIDlist := f_append(PreRID), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PreLoc, PreRID)>, DstAdd == Node, PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), RLOC := Node, R := rh2, RID := f_sha1((R+ RLOC)+ List), PreLoclist := f_append(PreLoc), PreRIDlist := f_append(PreRID), PreInfolist := f_concat(PreLoclist, PreRIDlist).
ECA Rule prov_rh2_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List, PreLoc, PreRID)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>, PreLoc := f_first(PreInfolist), Remainlist := f_removeFirst(PreInfolist), PreRID := f_first(Remainlist).
ECA Rule prov_rh2_3ECAMat ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)> :- EVENT_RECV<prov_rh2_3recvPacketsend(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>.
ECA Rule prov_rh2_3_eca ACTION_REMOTE_SEND<prov_rh2_3recvPacketsend(@Node, SrcAdd, DstAdd, Data, RID, RLOC)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, PreInfolist)>.
ECA Rule prov_rh2_5Eca0Ins ACTION_ADD<prov(@Node, VID, RLOC, RID)> :- EVENT_INSERT<recvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule prov_rh2_5Eca0Del ACTION_DELETE<prov(@Node, VID, RLOC, RID)> :- EVENT_DELETE<recvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule edb1_eca ACTION_REMOTE_SEND<baseReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<baseQuery(@X, QID, VID, Ret)>, Prov := f_pEDB(VID, X).
ECA Rule rtdb1_eca ACTION_REMOTE_SEND<ruleQuery(@RLoc, NQID, RID, X)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, prov(@X, VID, RLoc, RID), RID != VID, NQID := f_sha1((+ QID)+ RID).
ECA Rule rtdb2_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, Buf := f_empty().
ECA Rule rtdb3_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, RID, Prov)>, pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rtdb4Eca0Ins ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_INSERT<pResultTmp(@X, QID, Ret, VID, Buf)>, Prov := f_pIDB(Buf, X).
ECA Rule rv1_eca ACTION_ADD<rQList(@X, QID, List)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, ruleExec(@X, RID, R, List, PreLoc, PreRID).
ECA Rule rv2_eca ACTION_REMOTE_SEND<ruleQuery(@PreLoc, NQID, PreRID, Ret)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, ruleExec(@X, RID, R, List, PreLoc, PreRID), PreRID != f_sha1(NULL), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv3_eca ACTION_ADD<childWait(@X, QID, RID, Ret, Itm)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, ruleExec(@X, RID, R, List, PreLoc, PreRID), PreRID == f_sha1(NULL), NQID := f_sha1((+ QID)+ VID), Itm := 0.
ECA Rule rv4_eca ACTION_ADD<childWait(@X, QID, RID, Ret, Itm)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, ruleExec(@X, RID, R, List, PreLoc, PreRID), PreRID != f_sha1(NULL), NQID := f_sha1((+ QID)+ VID), Itm := 1.
ECA Rule rv5_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, Buf := f_empty().
ECA Rule rv6_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, N := 1.
ECA Rule rv7_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<rIterate(@X, QID, N1)>, rQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule rv8_eca ACTION_LOCAL_SEND<baseQuery(@X, NQID, VID)> :- EVENT_RECV<rIterate(@X, QID, N)>, rQList(@X, QID, List), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv9_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<baseReturn(@X, NQID, VID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rv10_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<rReturn(@X, QID, RID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf2, Buf1).
ECA Rule rv11Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, childWait(@X, QID, RID, Ret, Itm), rQList(@X, QID, List), Itm == 1, f_size(Buf) == f_size(List)+ 1.
ECA Rule rv11Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<childWait(@X, QID, RID, Ret, Itm)>, rResultTmp(@X, QID, Ret, RID, Buf), rQList(@X, QID, List), Itm == 1, f_size(Buf) == f_size(List)+ 1.
ECA Rule rv11Eca3Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rQList(@X, QID, List)>, rResultTmp(@X, QID, Ret, RID, Buf), childWait(@X, QID, RID, Ret, Itm), Itm == 1, f_size(Buf) == f_size(List)+ 1.
ECA Rule rv12Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, childWait(@X, QID, RID, Ret, Itm), rQList(@X, QID, List), Itm == 0, f_size(Buf) == f_size(List).
ECA Rule rv12Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<childWait(@X, QID, RID, Ret, Itm)>, rResultTmp(@X, QID, Ret, RID, Buf), rQList(@X, QID, List), Itm == 0, f_size(Buf) == f_size(List).
ECA Rule rv12Eca3Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rQList(@X, QID, List)>, rResultTmp(@X, QID, Ret, RID, Buf), childWait(@X, QID, RID, Ret, Itm), Itm == 0, f_size(Buf) == f_size(List).
ECA Rule rv13_eca ACTION_REMOTE_SEND<rReturn(@Ret, QID, RID, Prov)> :- EVENT_RECV<eRReturn(@X, QID)>, rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, R, List, PreLoc, PreRID), Prov := f_pRULE(Buf, X, R).
