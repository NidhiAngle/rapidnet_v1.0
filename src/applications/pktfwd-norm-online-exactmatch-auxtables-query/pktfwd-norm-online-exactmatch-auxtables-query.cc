/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-norm-online-exactmatch-auxtables-query.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdnormonlineexactmatchauxtablesquery;

const string PktfwdNormOnlineExactmatchAuxtablesQuery::EPACKETCOUNT = "epacketCount";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::EPACKETTEMP = "epacketTemp";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::EQUIHASHTABLE = "equiHashTable";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::ERECVPACKETTEMP = "erecvPacketTemp";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::FLOWENTRY = "flowEntry";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::INITPACKET = "initPacket";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::INITPACKETCOUNT = "initPacketCount";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::INITPACKETHASH = "initPacketHash";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::LINK = "link";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PACKET = "packet";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PACKETPROV = "packetProv";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PROGRAMID = "programID";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PROVHASHTABLE = "provHashTable";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PROVLINK = "provLink";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PROVQUERY = "provQuery";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PROVREF = "provRef";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PROVRESULT = "provResult";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::PROVSTR = "provStr";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RQUERY = "rQuery";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RRETURN = "rReturn";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RRETURNSIG = "rReturnSig";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RECORDRULE = "recordRule";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RECVPACKET = "recvPacket";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RECVPACKETNP = "recvPacketNP";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RECVPACKETPROV = "recvPacketProv";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RULEEXEC = "ruleExec";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::RULEINFO = "ruleInfo";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::SLOWCHANGEQUERY = "slowChangeQuery";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::TQUERY = "tQuery";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::TRETURN = "tReturn";
const string PktfwdNormOnlineExactmatchAuxtablesQuery::TUPLEITR = "tupleItr";

NS_LOG_COMPONENT_DEFINE ("PktfwdNormOnlineExactmatchAuxtablesQuery");
NS_OBJECT_ENSURE_REGISTERED (PktfwdNormOnlineExactmatchAuxtablesQuery);

TypeId
PktfwdNormOnlineExactmatchAuxtablesQuery::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdnormonlineexactmatchauxtablesquery::PktfwdNormOnlineExactmatchAuxtablesQuery")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdNormOnlineExactmatchAuxtablesQuery> ()
    ;
  return tid;
}

PktfwdNormOnlineExactmatchAuxtablesQuery::PktfwdNormOnlineExactmatchAuxtablesQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdNormOnlineExactmatchAuxtablesQuery::~PktfwdNormOnlineExactmatchAuxtablesQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormOnlineExactmatchAuxtablesQuery Application Started");
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormOnlineExactmatchAuxtablesQuery Application Stopped");
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (EQUIHASHTABLE, attrdeflist (
    attrdef ("equiHashTable_attr2", IPV4)));

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PROGRAMID, attrdeflist (
    attrdef ("programID_attr2", IPV4)));

  AddRelationWithKeys (PROVHASHTABLE, attrdeflist (
    attrdef ("provHashTable_attr2", ID),
    attrdef ("provHashTable_attr3", STR)));

  AddRelationWithKeys (PROVLINK, attrdeflist (
    attrdef ("provLink_attr2", ID),
    attrdef ("provLink_attr3", INT32),
    attrdef ("provLink_attr4", IPV4),
    attrdef ("provLink_attr5", ID),
    attrdef ("provLink_attr6", INT32),
    attrdef ("provLink_attr7", ID)));

  AddRelationWithKeys (PROVREF, attrdeflist (
    attrdef ("provRef_attr2", ID)));

  AddRelationWithKeys (PROVRESULT, attrdeflist (
    attrdef ("provResult_attr2", ID)));

  AddRelationWithKeys (PROVSTR, attrdeflist (
    attrdef ("provStr_attr2", ID)));

  AddRelationWithKeys (RECORDRULE, attrdeflist (
    attrdef ("recordRule_attr1", IPV4)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4),
    attrdef ("recvPacket_attr4", STR)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr2", ID)));

  AddRelationWithKeys (RULEINFO, attrdeflist (
    attrdef ("ruleInfo_attr2", STR)));

  AddRelationWithKeys (SLOWCHANGEQUERY, attrdeflist (
    attrdef ("slowChangeQuery_attr2", ID)));

}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, RECORDRULE))
    {
      Rr01Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECORDRULE))
    {
      Rr01Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, RECORDRULE))
    {
      Rr02Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECORDRULE))
    {
      Rr02Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, RECORDRULE))
    {
      Rr03Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECORDRULE))
    {
      Rr03Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_r00Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, INITPACKET))
    {
      Prov_r00Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_r01Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_r01Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      Prov_r03Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FLOWENTRY))
    {
      Prov_r03Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, PACKETPROV))
    {
      Prov_rs1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETCOUNT))
    {
      Prov_rs1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rs1_eca (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_ri1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PROGRAMID))
    {
      Prov_ri1Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETHASH))
    {
      Prov_ri2_eca (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETCOUNT))
    {
      Prov_ri3_eca (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETCOUNT))
    {
      Rh1_eca (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETCOUNT))
    {
      Prov_rh1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKETPROV))
    {
      Prov_rh2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, RECVPACKETPROV))
    {
      Ro1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RECVPACKETPROV))
    {
      Ro2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RECVPACKETPROV))
    {
      Ro3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rh2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RECVPACKETNP))
    {
      Rho3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RECVPACKETNP))
    {
      Rho4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Rqini_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqev_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqrec_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqsc1_eca (tuple);
    }
  if (IsInsertEvent (tuple, SLOWCHANGEQUERY))
    {
      Rqsc2Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, TUPLEITR))
    {
      Rqsc3_eca (tuple);
    }
  if (IsRecvEvent (tuple, TUPLEITR))
    {
      Rqsc4_eca (tuple);
    }
  if (IsRecvEvent (tuple, TQUERY))
    {
      Rqsc5_eca (tuple);
    }
  if (IsRecvEvent (tuple, RQUERY))
    {
      Rqrt1_eca (tuple);
    }
  if (IsRecvEvent (tuple, TRETURN))
    {
      Rqrt2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Rqrt3_eca (tuple);
    }
  if (IsInsertEvent (tuple, PROVRESULT))
    {
      Rqrt4Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, RRETURNSIG))
    {
      Rqrt5_eca (tuple);
    }
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rr01Eca0Ins (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr01Eca0Ins triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rr01Eca0Del (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr01Eca0Del triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Delete (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rr02Eca0Ins (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr02Eca0Ins triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rr02Eca0Del (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr02Eca0Del triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("packet(Next,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Delete (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rr03Eca0Ins (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr03Eca0Ins triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("recvPacket(Node,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);DstAdd == Node."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rr03Eca0Del (Ptr<Tuple> recordRule)
{
  RAPIDNET_LOG_INFO ("Rr03Eca0Del triggered");

  Ptr<Tuple> result = recordRule;

  result->Assign (Assignor::New ("RName",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RHead",
    ValueExpr::New (StrValue::New ("recvPacket(Node,SrcAdd,DstAdd,Data)"))));

  result->Assign (Assignor::New ("RBody",
    ValueExpr::New (StrValue::New ("packet(Node,SrcAdd,DstAdd,Data);DstAdd == Node."))));

  result = result->Project (
    RULEINFO,
    strlist ("recordRule_attr1",
      "RName",
      "RHead",
      "RBody"),
    strlist ("ruleInfo_attr1",
      "ruleInfo_attr2",
      "ruleInfo_attr3",
      "ruleInfo_attr4"));

  Delete (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_r00Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_r00Eca0Ins triggered");

  Ptr<Tuple> result = initPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("initPacket")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("initPacket_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("initPacket_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("initPacket_attr3"))));

  result->Assign (Assignor::New ("TpStrList7",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result->Assign (Assignor::New ("TpStrList8",
    FAppend::New (
      VarExpr::New ("initPacket_attr4"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList7"),
      VarExpr::New ("TpStrList8"))));

  result = result->Project (
    PROVSTR,
    strlist ("initPacket_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_r00Eca0Del (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_r00Eca0Del triggered");

  Ptr<Tuple> result = initPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("initPacket")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("initPacket_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("initPacket_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("initPacket_attr3"))));

  result->Assign (Assignor::New ("TpStrList7",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result->Assign (Assignor::New ("TpStrList8",
    FAppend::New (
      VarExpr::New ("initPacket_attr4"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList7"),
      VarExpr::New ("TpStrList8"))));

  result = result->Project (
    PROVSTR,
    strlist ("initPacket_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Delete (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_r01Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r01Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("link")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result = result->Project (
    PROVSTR,
    strlist ("link_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_r01Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r01Eca0Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("link")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result = result->Project (
    PROVSTR,
    strlist ("link_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Delete (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_r03Eca0Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_r03Eca0Ins triggered");

  Ptr<Tuple> result = flowEntry;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("flowEntry_attr1")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("flowEntry")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("flowEntry_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("flowEntry_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("flowEntry_attr3"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result = result->Project (
    PROVSTR,
    strlist ("flowEntry_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_r03Eca0Del (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_r03Eca0Del triggered");

  Ptr<Tuple> result = flowEntry;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("flowEntry_attr1")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("TpStrList1",
    FAppend::New (
      ValueExpr::New (StrValue::New ("flowEntry")))));

  result->Assign (Assignor::New ("TpStrList2",
    FAppend::New (
      VarExpr::New ("flowEntry_attr1"))));

  result->Assign (Assignor::New ("TpStrList3",
    FConcat::New (
      VarExpr::New ("TpStrList1"),
      VarExpr::New ("TpStrList2"))));

  result->Assign (Assignor::New ("TpStrList4",
    FAppend::New (
      VarExpr::New ("flowEntry_attr2"))));

  result->Assign (Assignor::New ("TpStrList5",
    FConcat::New (
      VarExpr::New ("TpStrList3"),
      VarExpr::New ("TpStrList4"))));

  result->Assign (Assignor::New ("TpStrList6",
    FAppend::New (
      VarExpr::New ("flowEntry_attr3"))));

  result->Assign (Assignor::New ("TpStrList",
    FConcat::New (
      VarExpr::New ("TpStrList5"),
      VarExpr::New ("TpStrList6"))));

  result = result->Project (
    PROVSTR,
    strlist ("flowEntry_attr1",
      "VID",
      "TpStrList"),
    strlist ("provStr_attr1",
      "provStr_attr2",
      "provStr_attr3"));

  Delete (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rs1_1_eca (Ptr<Tuple> packetProv)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    packetProv,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packetProv_attr3", "packetProv_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packetProv_attr1"));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("packetProv_attr1")),
          VarExpr::New ("packetProv_attr3")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("packetProv_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packetProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "packetProv_attr2",
      "packetProv_attr3",
      "packetProv_attr4",
      "RID",
      "R",
      "List",
      "packetProv_attr5",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rs1_2_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    epacketTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("epacketTemp_attr8", "epacketTemp_attr7", "epacketTemp_attr6", "epacketTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, epacketTemp);

  result = result->Project (
    EPACKETCOUNT,
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "count"),
    strlist ("epacketCount_attr1",
      "epacketCount_attr2",
      "epacketCount_attr3",
      "epacketCount_attr4",
      "epacketCount_attr5"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rs1_3_eca (Ptr<Tuple> epacketCount)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_3_eca triggered");

  Ptr<Tuple> result = epacketCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("epacketCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("epacketCount_attr1",
      "epacketCount_attr2",
      "epacketCount_attr3",
      "epacketCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rs1_4_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_4_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result->Assign (Assignor::New ("PreCount",
    FFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("CurCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("PreCount"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("TempTag1",
    FRemoveFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("Preloc",
    FFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("TempTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("TempTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("TempTag3"))));

  result = result->Project (
    PROVLINK,
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr6",
      "CurCount",
      "Preloc",
      "PreRID",
      "PreCount",
      "PIDequi"),
    strlist ("provLink_attr1",
      "provLink_attr2",
      "provLink_attr3",
      "provLink_attr4",
      "provLink_attr5",
      "provLink_attr6",
      "provLink_attr7"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rs1_5_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_5_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("NewCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("Count"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("NewCountlist",
    FAppend::New (
      VarExpr::New ("NewCount"))));

  result->Assign (Assignor::New ("TempNewTag1",
    FRemoveFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("TempNewTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag1"))));

  result->Assign (Assignor::New ("TempNewTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("epacketTemp_attr6"))));

  result->Assign (Assignor::New ("Loclist",
    FAppend::New (
      VarExpr::New ("epacketTemp_attr1"))));

  result->Assign (Assignor::New ("TempNewTag4",
    FConcat::New (
      VarExpr::New ("RIDlist"),
      VarExpr::New ("TempNewTag3"))));

  result->Assign (Assignor::New ("TempNewTag5",
    FConcat::New (
      VarExpr::New ("Loclist"),
      VarExpr::New ("TempNewTag4"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("NewCountlist"),
      VarExpr::New ("TempNewTag5"))));

  result = result->Project (
    PACKETPROV,
    strlist ("epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "NewTag",
      "epacketTemp_attr2"),
    strlist ("packetProv_attr1",
      "packetProv_attr2",
      "packetProv_attr3",
      "packetProv_attr4",
      "packetProv_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rs1_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    packet,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packet_attr3", "packet_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packet_attr1"));

  result = result->Project (
    PACKET,
    strlist ("flowEntry_attr3",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      "flowEntry_attr3"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_ri1Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_ri1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROGRAMID)->Join (
    initPacket,
    strlist ("programID_attr2", "programID_attr1"),
    strlist ("initPacket_attr3", "initPacket_attr1"));

  result->Assign (Assignor::New ("PIDequi",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result = result->Project (
    INITPACKETHASH,
    strlist ("initPacket_attr1",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "PIDequi",
      "programID_attr3"),
    strlist ("initPacketHash_attr1",
      "initPacketHash_attr2",
      "initPacketHash_attr3",
      "initPacketHash_attr4",
      "initPacketHash_attr5",
      "initPacketHash_attr6"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_ri1Eca1Ins (Ptr<Tuple> programID)
{
  RAPIDNET_LOG_INFO ("Prov_ri1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    programID,
    strlist ("initPacket_attr3", "initPacket_attr1"),
    strlist ("programID_attr2", "programID_attr1"));

  result->Assign (Assignor::New ("PIDequi",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("")),
              VarExpr::New ("programID_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("programID_attr2")),
        VarExpr::New ("initPacket_attr4")))));

  result = result->Project (
    INITPACKETHASH,
    strlist ("programID_attr1",
      "initPacket_attr2",
      "programID_attr2",
      "initPacket_attr4",
      "PIDequi",
      "programID_attr3"),
    strlist ("initPacketHash_attr1",
      "initPacketHash_attr2",
      "initPacketHash_attr3",
      "initPacketHash_attr4",
      "initPacketHash_attr5",
      "initPacketHash_attr6"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_ri2_eca (Ptr<Tuple> initPacketHash)
{
  RAPIDNET_LOG_INFO ("Prov_ri2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (EQUIHASHTABLE)->Join (
    initPacketHash,
    strlist ("equiHashTable_attr2", "equiHashTable_attr1", "equiHashTable_attr3"),
    strlist ("initPacketHash_attr3", "initPacketHash_attr1", "initPacketHash_attr5"));

  result = AggWrapCount::New ()->Compute (result, initPacketHash);

  result = result->Project (
    INITPACKETCOUNT,
    strlist ("initPacketHash_attr1",
      "initPacketHash_attr2",
      "initPacketHash_attr3",
      "initPacketHash_attr4",
      "initPacketHash_attr5",
      "initPacketHash_attr6",
      "count"),
    strlist ("initPacketCount_attr1",
      "initPacketCount_attr2",
      "initPacketCount_attr3",
      "initPacketCount_attr4",
      "initPacketCount_attr5",
      "initPacketCount_attr6",
      "initPacketCount_attr7"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_ri3_eca (Ptr<Tuple> initPacketCount)
{
  RAPIDNET_LOG_INFO ("Prov_ri3_eca triggered");

  Ptr<Tuple> result = initPacketCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("initPacketCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EQUIHASHTABLE,
    strlist ("initPacketCount_attr1",
      "initPacketCount_attr3",
      "initPacketCount_attr5"),
    strlist ("equiHashTable_attr1",
      "equiHashTable_attr2",
      "equiHashTable_attr3"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rh1_eca (Ptr<Tuple> initPacketCount)
{
  RAPIDNET_LOG_INFO ("Rh1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    initPacketCount,
    strlist ("link_attr1"),
    strlist ("initPacketCount_attr1"));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacketCount_attr1")),
            VarExpr::New ("initPacketCount_attr2")),
          VarExpr::New ("initPacketCount_attr3")),
        VarExpr::New ("initPacketCount_attr4")))));

  result->Assign (Assignor::New ("PIDequiHash",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr5"))));

  result->Assign (Assignor::New ("PIDevHash",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("ProgIDlist",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr6"))));

  result->Assign (Assignor::New ("PIDHash1",
    FConcat::New (
      VarExpr::New ("PIDequiHash"),
      VarExpr::New ("PIDevHash"))));

  result->Assign (Assignor::New ("PIDHash",
    FConcat::New (
      VarExpr::New ("PIDHash1"),
      VarExpr::New ("ProgIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("initPacketCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PACKET,
    strlist ("link_attr2",
      "initPacketCount_attr2",
      "initPacketCount_attr3",
      "initPacketCount_attr4",
      "PIDHash",
      "link_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rh1_1_eca (Ptr<Tuple> initPacketCount)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    initPacketCount,
    strlist ("link_attr1"),
    strlist ("initPacketCount_attr1"));

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("initPacketCount_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("initPacketCount_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Equilist",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr5"))));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacketCount_attr1")),
            VarExpr::New ("initPacketCount_attr2")),
          VarExpr::New ("initPacketCount_attr3")),
        VarExpr::New ("initPacketCount_attr4")))));

  result->Assign (Assignor::New ("Evlist",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("ProgIDlist",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr6"))));

  result->Assign (Assignor::New ("Count",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("Countlist",
    FAppend::New (
      VarExpr::New ("Count"))));

  result->Assign (Assignor::New ("InitProvNode",
    VarExpr::New ("initPacketCount_attr1")));

  result->Assign (Assignor::New ("InitProvNodelist",
    FAppend::New (
      VarExpr::New ("InitProvNode"))));

  result->Assign (Assignor::New ("InitProvHash",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("InitProvHashlist",
    FAppend::New (
      VarExpr::New ("InitProvHash"))));

  result->Assign (Assignor::New ("TempTag1",
    FConcat::New (
      VarExpr::New ("Countlist"),
      VarExpr::New ("InitProvNodelist"))));

  result->Assign (Assignor::New ("TempTag2",
    FConcat::New (
      VarExpr::New ("TempTag1"),
      VarExpr::New ("InitProvHashlist"))));

  result->Assign (Assignor::New ("TempTag3",
    FConcat::New (
      VarExpr::New ("TempTag2"),
      VarExpr::New ("Equilist"))));

  result->Assign (Assignor::New ("TempTag4",
    FConcat::New (
      VarExpr::New ("TempTag3"),
      VarExpr::New ("Evlist"))));

  result->Assign (Assignor::New ("Tag",
    FConcat::New (
      VarExpr::New ("TempTag4"),
      VarExpr::New ("ProgIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("initPacketCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "link_attr2",
      "initPacketCount_attr2",
      "initPacketCount_attr3",
      "initPacketCount_attr4",
      "RID",
      "R",
      "List",
      "Tag",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rh2_1_eca (Ptr<Tuple> packetProv)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_1_eca triggered");

  Ptr<Tuple> result = packetProv;

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packetProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packetProv_attr3"),
      VarExpr::New ("packetProv_attr1"))));

  result = result->Project (
    ERECVPACKETTEMP,
    strlist ("RLOC",
      "packetProv_attr1",
      "packetProv_attr2",
      "packetProv_attr3",
      "packetProv_attr4",
      "RID",
      "R",
      "List",
      "packetProv_attr5",
      "RLOC"),
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "erecvPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rh2_2_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    erecvPacketTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("erecvPacketTemp_attr8", "erecvPacketTemp_attr7", "erecvPacketTemp_attr6", "erecvPacketTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, erecvPacketTemp);

  result = result->Project (
    EPACKETCOUNT,
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "count"),
    strlist ("epacketCount_attr1",
      "epacketCount_attr2",
      "epacketCount_attr3",
      "epacketCount_attr4",
      "epacketCount_attr5"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rh2_4_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_4_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result->Assign (Assignor::New ("PreCount",
    FFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("CurCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("PreCount"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("TempTag1",
    FRemoveFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("Preloc",
    FFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("TempTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("TempTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("TempTag3"))));

  result = result->Project (
    PROVLINK,
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr6",
      "CurCount",
      "Preloc",
      "PreRID",
      "PreCount",
      "PIDequi"),
    strlist ("provLink_attr1",
      "provLink_attr2",
      "provLink_attr3",
      "provLink_attr4",
      "provLink_attr5",
      "provLink_attr6",
      "provLink_attr7"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Prov_rh2_5_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("NewCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("Count"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("NewCountlist",
    FAppend::New (
      VarExpr::New ("NewCount"))));

  result->Assign (Assignor::New ("TempNewTag1",
    FRemoveFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("TempNewTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag1"))));

  result->Assign (Assignor::New ("TempNewTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("erecvPacketTemp_attr6"))));

  result->Assign (Assignor::New ("Loclist",
    FAppend::New (
      VarExpr::New ("erecvPacketTemp_attr1"))));

  result->Assign (Assignor::New ("TempNewTag4",
    FConcat::New (
      VarExpr::New ("RIDlist"),
      VarExpr::New ("TempNewTag3"))));

  result->Assign (Assignor::New ("TempNewTag5",
    FConcat::New (
      VarExpr::New ("Loclist"),
      VarExpr::New ("TempNewTag4"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("NewCountlist"),
      VarExpr::New ("TempNewTag5"))));

  result = result->Project (
    RECVPACKETPROV,
    strlist ("erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "NewTag",
      "erecvPacketTemp_attr2"),
    strlist ("recvPacketProv_attr1",
      "recvPacketProv_attr2",
      "recvPacketProv_attr3",
      "recvPacketProv_attr4",
      "recvPacketProv_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Ro1_eca (Ptr<Tuple> recvPacketProv)
{
  RAPIDNET_LOG_INFO ("Ro1_eca triggered");

  Ptr<Tuple> result = recvPacketProv;

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("recvPacketProv_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacketProv_attr5"))));

  result->Assign (Assignor::New ("Loc",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RID",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("RemainTag5",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("RemainTag5"))));

  result = result->Project (
    PROVHASHTABLE,
    strlist ("recvPacketProv_attr1",
      "PIDequi",
      "ProgID",
      "Loc",
      "RID",
      "Count"),
    strlist ("provHashTable_attr1",
      "provHashTable_attr2",
      "provHashTable_attr3",
      "provHashTable_attr4",
      "provHashTable_attr5",
      "provHashTable_attr6"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Ro2_eca (Ptr<Tuple> recvPacketProv)
{
  RAPIDNET_LOG_INFO ("Ro2_eca triggered");

  Ptr<Tuple> result = recvPacketProv;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("recvPacketProv_attr1")),
            VarExpr::New ("recvPacketProv_attr2")),
          VarExpr::New ("recvPacketProv_attr3")),
        VarExpr::New ("recvPacketProv_attr4")))));

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("recvPacketProv_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacketProv_attr5"))));

  result->Assign (Assignor::New ("Loc",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RID",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result = result->Project (
    PROVREF,
    strlist ("recvPacketProv_attr1",
      "PID",
      "PIDequi",
      "PIDev"),
    strlist ("provRef_attr1",
      "provRef_attr2",
      "provRef_attr3",
      "provRef_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Ro3_eca (Ptr<Tuple> recvPacketProv)
{
  RAPIDNET_LOG_INFO ("Ro3_eca triggered");

  Ptr<Tuple> result = recvPacketProv;

  result = result->Project (
    RECVPACKET,
    strlist ("recvPacketProv_attr1",
      "recvPacketProv_attr2",
      "recvPacketProv_attr3",
      "recvPacketProv_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rh2_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rh2_eca triggered");

  Ptr<Tuple> result = packet;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Project (
    RECVPACKETNP,
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5"),
    strlist ("recvPacketNP_attr1",
      "recvPacketNP_attr2",
      "recvPacketNP_attr3",
      "recvPacketNP_attr4",
      "recvPacketNP_attr5"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rho3_eca (Ptr<Tuple> recvPacketNP)
{
  RAPIDNET_LOG_INFO ("Rho3_eca triggered");

  Ptr<Tuple> result = recvPacketNP;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("recvPacketNP_attr1")),
            VarExpr::New ("recvPacketNP_attr2")),
          VarExpr::New ("recvPacketNP_attr3")),
        VarExpr::New ("recvPacketNP_attr4")))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("recvPacketNP_attr5"))));

  result->Assign (Assignor::New ("PIDHash1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacketNP_attr5"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("PIDHash1"))));

  result = result->Project (
    PROVREF,
    strlist ("recvPacketNP_attr1",
      "PID",
      "PIDequi",
      "PIDev"),
    strlist ("provRef_attr1",
      "provRef_attr2",
      "provRef_attr3",
      "provRef_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rho4_eca (Ptr<Tuple> recvPacketNP)
{
  RAPIDNET_LOG_INFO ("Rho4_eca triggered");

  Ptr<Tuple> result = recvPacketNP;

  result = result->Project (
    RECVPACKET,
    strlist ("recvPacketNP_attr1",
      "recvPacketNP_attr2",
      "recvPacketNP_attr3",
      "recvPacketNP_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqini_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Rqini_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVREF)->Join (
    provQuery,
    strlist ("provRef_attr2", "provRef_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = GetRelation (PROVHASHTABLE)->Join (
    result,
    strlist ("provHashTable_attr2", "provHashTable_attr1"),
    strlist ("provRef_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("provQuery_attr2")),
        VarExpr::New ("provHashTable_attr5")))));

  result = result->Project (
    RQUERY,
    strlist ("provHashTable_attr4",
      "NQID",
      "provHashTable_attr5",
      "provHashTable_attr6",
      "provRef_attr4",
      "provRef_attr3",
      "provQuery_attr4",
      "provHashTable_attr4"),
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "rQuery_attr3",
      "rQuery_attr4",
      "rQuery_attr5",
      "rQuery_attr6",
      "rQuery_attr7",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqev_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqev_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVLINK)->Join (
    rQuery,
    strlist ("provLink_attr7", "provLink_attr2", "provLink_attr1"),
    strlist ("rQuery_attr6", "rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("TupleRet",
    VarExpr::New ("rQuery_attr1")));

  result->Assign (Assignor::New ("NNQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rQuery_attr2")),
        VarExpr::New ("rQuery_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("provLink_attr4"),
      VarExpr::New ("rQuery_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("provLink_attr5"),
      FSha1::New (
        ValueExpr::New (StrValue::New ("NULL"))))));

  result = result->Project (
    TQUERY,
    strlist ("rQuery_attr1",
      "NNQID",
      "rQuery_attr5",
      "TupleRet"),
    strlist ("tQuery_attr1",
      "tQuery_attr2",
      "tQuery_attr3",
      "tQuery_attr4"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqrec_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqrec_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVLINK)->Join (
    rQuery,
    strlist ("provLink_attr7", "provLink_attr2", "provLink_attr1"),
    strlist ("rQuery_attr6", "rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("NNQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rQuery_attr2")),
        VarExpr::New ("provLink_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("provLink_attr5"),
      FSha1::New (
        ValueExpr::New (StrValue::New ("NULL"))))));

  result = result->Project (
    RQUERY,
    strlist ("provLink_attr4",
      "NNQID",
      "provLink_attr5",
      "provLink_attr6",
      "rQuery_attr5",
      "rQuery_attr6",
      "rQuery_attr1",
      "provLink_attr4"),
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "rQuery_attr3",
      "rQuery_attr4",
      "rQuery_attr5",
      "rQuery_attr6",
      "rQuery_attr7",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqsc1_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqsc1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    rQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("TupleRet",
    VarExpr::New ("rQuery_attr1")));

  result = result->Project (
    SLOWCHANGEQUERY,
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "ruleExec_attr4",
      "TupleRet"),
    strlist ("slowChangeQuery_attr1",
      "slowChangeQuery_attr2",
      "slowChangeQuery_attr3",
      "slowChangeQuery_attr4"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqsc2Eca0Ins (Ptr<Tuple> slowChangeQuery)
{
  RAPIDNET_LOG_INFO ("Rqsc2Eca0Ins triggered");

  Ptr<Tuple> result = slowChangeQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    TUPLEITR,
    strlist ("slowChangeQuery_attr1",
      "slowChangeQuery_attr2",
      "N"),
    strlist ("tupleItr_attr1",
      "tupleItr_attr2",
      "tupleItr_attr3"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqsc3_eca (Ptr<Tuple> tupleItr)
{
  RAPIDNET_LOG_INFO ("Rqsc3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SLOWCHANGEQUERY)->Join (
    tupleItr,
    strlist ("slowChangeQuery_attr2", "slowChangeQuery_attr1"),
    strlist ("tupleItr_attr2", "tupleItr_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("tupleItr_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("tupleItr_attr3"),
      FSize::New (
        VarExpr::New ("slowChangeQuery_attr3")))));

  result = result->Project (
    TUPLEITR,
    strlist ("tupleItr_attr1",
      "tupleItr_attr2",
      "N"),
    strlist ("tupleItr_attr1",
      "tupleItr_attr2",
      "tupleItr_attr3"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqsc4_eca (Ptr<Tuple> tupleItr)
{
  RAPIDNET_LOG_INFO ("Rqsc4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SLOWCHANGEQUERY)->Join (
    tupleItr,
    strlist ("slowChangeQuery_attr2", "slowChangeQuery_attr1"),
    strlist ("tupleItr_attr2", "tupleItr_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("slowChangeQuery_attr3"),
      VarExpr::New ("tupleItr_attr3"))));

  result->Assign (Assignor::New ("NNQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("tupleItr_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    TQUERY,
    strlist ("tupleItr_attr1",
      "NNQID",
      "VID",
      "slowChangeQuery_attr4"),
    strlist ("tQuery_attr1",
      "tQuery_attr2",
      "tQuery_attr3",
      "tQuery_attr4"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqsc5_eca (Ptr<Tuple> tQuery)
{
  RAPIDNET_LOG_INFO ("Rqsc5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVSTR)->Join (
    tQuery,
    strlist ("provStr_attr2", "provStr_attr1"),
    strlist ("tQuery_attr3", "tQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdbTp::New (
      VarExpr::New ("provStr_attr3"),
      VarExpr::New ("tQuery_attr1"))));

  result = result->Project (
    TRETURN,
    strlist ("tQuery_attr4",
      "tQuery_attr2",
      "tQuery_attr3",
      "Prov",
      "tQuery_attr4"),
    strlist ("tReturn_attr1",
      "tReturn_attr2",
      "tReturn_attr3",
      "tReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqrt1_eca (Ptr<Tuple> rQuery)
{
  RAPIDNET_LOG_INFO ("Rqrt1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    rQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rQuery_attr3", "rQuery_attr1"));

  result->Assign (Assignor::New ("BodyNum",
    Operation::New (RN_PLUS,
      FSize::New (
        VarExpr::New ("ruleExec_attr4")),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Buff",
    FEmpty::New (
)));

  result = result->Project (
    PROVRESULT,
    strlist ("rQuery_attr1",
      "rQuery_attr2",
      "rQuery_attr3",
      "Buff",
      "ruleExec_attr3",
      "BodyNum",
      "rQuery_attr7"),
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqrt2_eca (Ptr<Tuple> tReturn)
{
  RAPIDNET_LOG_INFO ("Rqrt2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVRESULT)->Join (
    tReturn,
    strlist ("provResult_attr1"),
    strlist ("tReturn_attr1"));

  result->Assign (Assignor::New ("ProvBuff",
    FAppend::New (
      VarExpr::New ("tReturn_attr4"))));

  result->Assign (Assignor::New ("NewBuff",
    FConcat::New (
      VarExpr::New ("provResult_attr4"),
      VarExpr::New ("ProvBuff"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("tReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("provResult_attr2")),
          VarExpr::New ("tReturn_attr3"))))));

  result = result->Project (
    PROVRESULT,
    strlist ("tReturn_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "NewBuff",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"),
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqrt3_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Rqrt3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVRESULT)->Join (
    rReturn,
    strlist ("provResult_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("ProvBuff",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("NewBuff",
    FConcat::New (
      VarExpr::New ("provResult_attr4"),
      VarExpr::New ("ProvBuff"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("provResult_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PROVRESULT,
    strlist ("rReturn_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "NewBuff",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"),
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"));

  Insert (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqrt4Eca0Ins (Ptr<Tuple> provResult)
{
  RAPIDNET_LOG_INFO ("Rqrt4Eca0Ins triggered");

  Ptr<Tuple> result = provResult;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("provResult_attr4")),
      VarExpr::New ("provResult_attr6"))));

  result = result->Project (
    RRETURNSIG,
    strlist ("provResult_attr1",
      "provResult_attr2",
      "provResult_attr3",
      "provResult_attr4",
      "provResult_attr5",
      "provResult_attr6",
      "provResult_attr7"),
    strlist ("rReturnSig_attr1",
      "rReturnSig_attr2",
      "rReturnSig_attr3",
      "rReturnSig_attr4",
      "rReturnSig_attr5",
      "rReturnSig_attr6",
      "rReturnSig_attr7"));

  SendLocal (result);
}

void
PktfwdNormOnlineExactmatchAuxtablesQuery::Rqrt5_eca (Ptr<Tuple> rReturnSig)
{
  RAPIDNET_LOG_INFO ("Rqrt5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEINFO)->Join (
    rReturnSig,
    strlist ("ruleInfo_attr2", "ruleInfo_attr1"),
    strlist ("rReturnSig_attr5", "rReturnSig_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRuleItm::New (
      VarExpr::New ("rReturnSig_attr4"),
      VarExpr::New ("rReturnSig_attr1"),
      VarExpr::New ("rReturnSig_attr5"),
      VarExpr::New ("ruleInfo_attr3"),
      VarExpr::New ("ruleInfo_attr4"))));

  result = result->Project (
    RRETURN,
    strlist ("rReturnSig_attr7",
      "rReturnSig_attr2",
      "rReturnSig_attr3",
      "Prov",
      "rReturnSig_attr7"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

