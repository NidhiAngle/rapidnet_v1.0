ECA Rule r00Eca1Ins ACTION_ADD<prov(@Node, VID, RID, $1)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, $1 := Node, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), RID := VID.
ECA Rule r00Eca1Del ACTION_DELETE<prov(@Node, VID, RID, $1)> :- EVENT_DELETE<initPacket(@Node, SrcAdd, DstAdd, Data)>, $1 := Node, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), RID := VID.
ECA Rule prov_r00Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_r00Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule r01Eca1Ins ACTION_ADD<prov(@Node, VID, RID, $1)> :- EVENT_INSERT<link(@Node, Next)>, $1 := Node, VID := f_sha1((link+ Node)+ Next), RID := VID.
ECA Rule r01Eca1Del ACTION_DELETE<prov(@Node, VID, RID, $1)> :- EVENT_DELETE<link(@Node, Next)>, $1 := Node, VID := f_sha1((link+ Node)+ Next), RID := VID.
ECA Rule prov_r01Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule prov_r01Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule r03Eca1Ins ACTION_ADD<prov(@Node, VID, RID, $1)> :- EVENT_INSERT<flowEntry(@Node, DstEntry, Next)>, $1 := Node, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), RID := VID.
ECA Rule r03Eca1Del ACTION_DELETE<prov(@Node, VID, RID, $1)> :- EVENT_DELETE<flowEntry(@Node, DstEntry, Next)>, $1 := Node, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), RID := VID.
ECA Rule prov_r03Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_r03Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rs1_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rs1_3_eca ACTION_REMOTE_SEND<epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rs1_4_eca ACTION_LOCAL_SEND<packet(@Next, SrcAdd, DstAdd, Data)> :- EVENT_RECV<epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC)>.
ECA Rule prov_rs1_5_eca ACTION_ADD<prov(@Next, VID, RID, RLOC)> :- EVENT_RECV<epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((packet+ Next)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule prov_rs1_6_eca ACTION_ADD<provStr(@Next, VID, TpStrList)> :- EVENT_RECV<epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((packet+ Next)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(packet), TpStrList2 := f_append(Next), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_rh1_1Eca0Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, link(@Node, Next), PID2 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh1_1Eca1Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_INSERT<link(@Node, Next)>, initPacket(@Node, SrcAdd, DstAdd, Data), PID2 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data)>, DstAdd == Node, PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), RLOC := Node, R := rh2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rh2_3_eca ACTION_REMOTE_SEND<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rh2_4_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>.
ECA Rule prov_rh2_5_eca ACTION_ADD<prov(@Node, VID, RID, RLOC)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule prov_rh2_6_eca ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(recvPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
