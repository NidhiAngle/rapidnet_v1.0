ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, HashList)> :- EVENT_RECV<packet(@Switch, SrcAdd, DstAdd, Data, HashList)>, device(@Switch, Dvtype), flowEntry(@Switch, DstAdd, Next), link(@Switch, Next), PID1 := f_sha1((device+ Switch)+ Dvtype), List := f_append(PID1), PID3 := f_sha1(((flowEntry+ Switch)+ DstAdd)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1((link+ Switch)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), Dvtype == 0, RLOC := Switch, R := rs1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rs1_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, HashList)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rs1_3_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketCount(@RLOC, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule prov_rs1_4_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, NewHashList)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, HashList)>, Hash := f_append(RID), NewHashList := f_concat(HashList, Hash).
ECA Rule prov_rh1_1Eca0Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Switch, SrcAdd, DstAdd, Data, RID, R, List, HashList)> :- EVENT_INSERT<device(@Host, Dvtype)>, initPacket(@Host, SrcAdd, DstAdd, Data), linkhr(@Host, Switch), PIDev := f_sha1((((initPacket+ Host)+ SrcAdd)+ DstAdd)+ Data), HashList := f_append(PIDev), PID1 := f_sha1((device+ Host)+ Dvtype), List := f_append(PID1), PID2 := f_sha1((linkhr+ Host)+ Switch), List2 := f_append(PID2), List := f_concat(List, List2), Dvtype == 1, RLOC := Host, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh1_1Eca1Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Switch, SrcAdd, DstAdd, Data, RID, R, List, HashList)> :- EVENT_INSERT<initPacket(@Host, SrcAdd, DstAdd, Data)>, device(@Host, Dvtype), linkhr(@Host, Switch), PIDev := f_sha1((((initPacket+ Host)+ SrcAdd)+ DstAdd)+ Data), HashList := f_append(PIDev), PID1 := f_sha1((device+ Host)+ Dvtype), List := f_append(PID1), PID2 := f_sha1((linkhr+ Host)+ Switch), List2 := f_append(PID2), List := f_concat(List, List2), Dvtype == 1, RLOC := Host, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh1_1Eca2Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Switch, SrcAdd, DstAdd, Data, RID, R, List, HashList)> :- EVENT_INSERT<linkhr(@Host, Switch)>, device(@Host, Dvtype), initPacket(@Host, SrcAdd, DstAdd, Data), PIDev := f_sha1((((initPacket+ Host)+ SrcAdd)+ DstAdd)+ Data), HashList := f_append(PIDev), PID1 := f_sha1((device+ Host)+ Dvtype), List := f_append(PID1), PID2 := f_sha1((linkhr+ Host)+ Switch), List2 := f_append(PID2), List := f_concat(List, List2), Dvtype == 1, RLOC := Host, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Host, SrcAdd, DstAdd, Data, RID, R, List, HashList)> :- EVENT_RECV<packet(@Host, SrcAdd, DstAdd, Data, HashList)>, device(@Host, Dvtype), DstAdd == Host, Dvtype == 1, PID1 := f_sha1((device+ Host)+ Dvtype), List := f_append(PID1), PID2 := f_sha1((((packet+ Host)+ SrcAdd)+ DstAdd)+ Data), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := Host, R := rh2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_2_eca ACTION_LOCAL_SEND<eRecvPacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Host, SrcAdd, DstAdd, Data, RID, R, List, HashList)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rh2_3_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<eRecvPacketCount(@RLOC, RID, R, List, Count)>, Count == 0.
ECA Rule prov_rh2_4_eca ACTION_REMOTE_SEND<erecvPacket(@Host, SrcAdd, DstAdd, Data, RID, RLOC, HashList)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Host, SrcAdd, DstAdd, Data, RID, R, List, HashList)>, Hash := f_append(RID), NewHashList := f_concat(HashList, Hash).
ECA Rule prov_rh2_5_eca ACTION_ADD<recvPacket(@Host, SrcAdd, DstAdd, Data)> :- EVENT_RECV<erecvPacket(@Host, SrcAdd, DstAdd, Data, RID, RLOC, HashList)>.
ECA Rule prov_rh2_6_eca ACTION_ADD<recvAuxPkt(@Host, PID, HashList)> :- EVENT_RECV<erecvPacket(@Host, SrcAdd, DstAdd, Data, RID, RLOC, HashList)>, PID := f_sha1((((recvPacket+ Host)+ SrcAdd)+ DstAdd)+ Data).
