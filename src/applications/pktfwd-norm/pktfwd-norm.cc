/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-norm.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdnorm;

const string PktfwdNorm::DEVICE = "device";
const string PktfwdNorm::FLOWENTRY = "flowEntry";
const string PktfwdNorm::INITPACKET = "initPacket";
const string PktfwdNorm::LINK = "link";
const string PktfwdNorm::LINKHR = "linkhr";
const string PktfwdNorm::PACKET = "packet";
const string PktfwdNorm::RECVPACKET = "recvPacket";

NS_LOG_COMPONENT_DEFINE ("PktfwdNorm");
NS_OBJECT_ENSURE_REGISTERED (PktfwdNorm);

TypeId
PktfwdNorm::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdnorm::PktfwdNorm")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdNorm> ()
    ;
  return tid;
}

PktfwdNorm::PktfwdNorm()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdNorm::~PktfwdNorm()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdNorm::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdNorm::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdNorm Application Started");
}

void
PktfwdNorm::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdNorm Application Stopped");
}

void
PktfwdNorm::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (DEVICE, attrdeflist (
    attrdef ("device_attr2", INT32)));

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (LINKHR, attrdeflist (
    attrdef ("linkhr_attr2", IPV4)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4),
    attrdef ("recvPacket_attr4", STR)));

}

void
PktfwdNorm::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, PACKET))
    {
      Rs1_eca (tuple);
    }
  if (IsInsertEvent (tuple, DEVICE))
    {
      Rh1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Rh1Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, LINKHR))
    {
      Rh1Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rh2_eca (tuple);
    }
}

void
PktfwdNorm::Rs1_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    packet,
    strlist ("device_attr1"),
    strlist ("packet_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packet_attr3", "packet_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packet_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PACKET,
    strlist ("flowEntry_attr3",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "flowEntry_attr3"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNorm::Rh1Eca0Ins (Ptr<Tuple> device)
{
  RAPIDNET_LOG_INFO ("Rh1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    device,
    strlist ("initPacket_attr1"),
    strlist ("device_attr1"));

  result = GetRelation (LINKHR)->Join (
    result,
    strlist ("linkhr_attr1"),
    strlist ("device_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    PACKET,
    strlist ("linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "linkhr_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNorm::Rh1Eca1Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Rh1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    initPacket,
    strlist ("device_attr1"),
    strlist ("initPacket_attr1"));

  result = GetRelation (LINKHR)->Join (
    result,
    strlist ("linkhr_attr1"),
    strlist ("initPacket_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    PACKET,
    strlist ("linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "linkhr_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNorm::Rh1Eca2Ins (Ptr<Tuple> linkhr)
{
  RAPIDNET_LOG_INFO ("Rh1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    linkhr,
    strlist ("device_attr1"),
    strlist ("linkhr_attr1"));

  result = GetRelation (INITPACKET)->Join (
    result,
    strlist ("initPacket_attr1"),
    strlist ("linkhr_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    PACKET,
    strlist ("linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "linkhr_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNorm::Rh2_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rh2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    packet,
    strlist ("device_attr1"),
    strlist ("packet_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    RECVPACKET,
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4"));

  Insert (result);
}

