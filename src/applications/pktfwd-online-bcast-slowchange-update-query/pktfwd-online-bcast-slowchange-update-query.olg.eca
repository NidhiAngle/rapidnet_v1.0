ECA Rule rr01Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rh1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next);flowEntry(Node,DstAdd,Next)..
ECA Rule rr01Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rh1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := initPacket(Node,SrcAdd,DstAdd,Data);link(Node,Next);flowEntry(Node,DstAdd,Next)..
ECA Rule rr02Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rs1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)..
ECA Rule rr02Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rs1, RHead := packet(Next,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);flowEntry(Node,DstAdd,Next);link(Node,Next)..
ECA Rule rr03Eca0Ins ACTION_ADD<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_INSERT<recordRule(@Node)>, RName := rh2, RHead := recvPacket(Node,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);DstAdd == Node..
ECA Rule rr03Eca0Del ACTION_DELETE<ruleInfo(@Node, RName, RHead, RBody)> :- EVENT_DELETE<recordRule(@Node)>, RName := rh2, RHead := recvPacket(Node,SrcAdd,DstAdd,Data), RBody := packet(Node,SrcAdd,DstAdd,Data);DstAdd == Node..
ECA Rule prov_r00Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_r00Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<initPacket(@Node, SrcAdd, DstAdd, Data)>, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), TpStrList1 := f_append(initPacket), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(SrcAdd), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(DstAdd), TpStrList7 := f_concat(TpStrList5, TpStrList6), TpStrList8 := f_append(Data), TpStrList := f_concat(TpStrList7, TpStrList8).
ECA Rule prov_r01Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule prov_r01Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<link(@Node, Next)>, VID := f_sha1((link+ Node)+ Next), TpStrList1 := f_append(link), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(Next), TpStrList := f_concat(TpStrList3, TpStrList4).
ECA Rule prov_r03Eca0Ins ACTION_ADD<provStr(@Node, VID, TpStrList)> :- EVENT_INSERT<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_r03Eca0Del ACTION_DELETE<provStr(@Node, VID, TpStrList)> :- EVENT_DELETE<flowEntry(@Node, DstEntry, Next)>, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), TpStrList1 := f_append(flowEntry), TpStrList2 := f_append(Node), TpStrList3 := f_concat(TpStrList1, TpStrList2), TpStrList4 := f_append(DstEntry), TpStrList5 := f_concat(TpStrList3, TpStrList4), TpStrList6 := f_append(Next), TpStrList := f_concat(TpStrList5, TpStrList6).
ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, NewTag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List := f_append(PID3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1((R+ RLOC)+ List), ProvID := f_first(Tag), NewProvID := f_sha1((+ ProvID)+ RID), NewProvID := f_append(NewProvID), NewTag1 := f_removeFirst(Tag), NewTag := f_concat(NewProvID, NewTag1).
ECA Rule prov_rs1_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rs1_3_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketCount(@RLOC, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule prov_rs1_4_eca ACTION_ADD<provLink(@RLOC, RID, CurCount, Preloc, PreRID, PreCount, PIDequi, ProvID)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ProvID := f_first(Tag), TempTag0 := f_removeFirst(Tag), PreCount := f_first(TempTag0), CurCount := PreCount+ 1, TempTag1 := f_removeFirst(TempTag0), Preloc := f_first(TempTag1), TempTag2 := f_removeFirst(TempTag1), PreRID := f_first(TempTag2), TempTag3 := f_removeFirst(TempTag2), PIDequi := f_first(TempTag3).
ECA Rule prov_rs1_5_eca ACTION_REMOTE_SEND<packetProv(@Next, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ProvID := f_first(Tag), ProvIDList := f_append(ProvID), TempNewTag0 := f_removeFirst(Tag), Count := f_first(TempNewTag0), NewCount := Count+ 1, NewCountlist := f_append(NewCount), TempNewTag1 := f_removeFirst(TempNewTag0), TempNewTag2 := f_removeFirst(TempNewTag1), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(RIDlist, TempNewTag3), TempNewTag5 := f_concat(Loclist, TempNewTag4), TempNewTag6 := f_concat(NewCountlist, TempNewTag5), NewTag := f_concat(ProvIDList, TempNewTag6).
ECA Rule rs1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next).
ECA Rule prov_ri1Eca0Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, programID(@Node, DstAdd, ProgID), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri1Eca1Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<programID(@Node, DstAdd, ProgID)>, initPacket(@Node, SrcAdd, DstAdd, Data), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri2_eca ACTION_LOCAL_SEND<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, COUNT< * >)> :- EVENT_RECV<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, equiHashTable(@Node, PIDequi, EquiKeys, Flag).
ECA Rule prov_ri3_eca ACTION_LOCAL_SEND<initPacketProv(@Node, $1, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_RECV<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, equiHashTable(@Node, PIDequi, EquiKeys, Flag), $1 := Node, Flag == 0.
ECA Rule prov_ri4_eca ACTION_LOCAL_SEND<initPacketNoProv(@Node, $1, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_RECV<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, equiHashTable(@Node, PIDequi, EquiKeys, Flag), $1 := Node, Flag == 1.
ECA Rule prov_ri5_eca ACTION_ADD<equiHashTable(@Node, PIDequi, EquiKeys, NewFlag)> :- EVENT_RECV<initPacketProv(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, equiHashTable(@Node, PIDequi, EquiKeys, Flag), Flag == 0, NewFlag := 1.
ECA Rule prov_ri6_eca ACTION_ADD<equiHashTable(@Node, PIDequi, EquiKeys, Flag)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, SrcList := f_append(SrcAdd), DstList := f_append(DstAdd), EquiKeys := f_concat(SrcList, DstList), Flag := 1, PIDcount == 0.
ECA Rule rh1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<initPacketNoProv(@Node, Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDequiHash := f_append(PIDequi), PIDevHash := f_append(PIDev), ProgIDlist := f_append(ProgID), PIDHash1 := f_concat(PIDequiHash, PIDevHash), PIDHash := f_concat(PIDHash1, ProgIDlist).
ECA Rule prov_rh1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PIDcount == 0, PID1 := f_sha1((link+ Node)+ Next), PID2 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), PID1List := f_append(PID1), PID2List := f_append(PID2), List := f_concat(PID1List, PID2List), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), Equilist := f_append(PIDequi), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), Evlist := f_append(PIDev), ProgIDlist := f_append(ProgID), Count := 0, Countlist := f_append(Count), InitProvNode := Node, InitProvNodelist := f_append(InitProvNode), InitProvHash := f_sha1(NULL), InitProvHashlist := f_append(InitProvHash), ProvID := f_sha1((+ InitProvHash)+ RID), ProvIDList := f_append(ProvID), TempTag0 := f_concat(ProvIDList, Countlist), TempTag1 := f_concat(TempTag0, InitProvNodelist), TempTag2 := f_concat(TempTag1, InitProvHashlist), TempTag3 := f_concat(TempTag2, Equilist), TempTag4 := f_concat(TempTag3, Evlist), Tag := f_concat(TempTag4, ProgIDlist).
ECA Rule prov_rh1_2_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<initPacketProv(@Node, Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID1 := f_sha1((link+ Node)+ Next), PID2 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), PID1List := f_append(PID1), PID2List := f_append(PID2), List := f_concat(PID1List, PID2List), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List), Equilist := f_append(PIDequi), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), Evlist := f_append(PIDev), ProgIDlist := f_append(ProgID), Count := 0, Countlist := f_append(Count), InitProvNode := Node, InitProvNodelist := f_append(InitProvNode), InitProvHash := f_sha1(NULL), InitProvHashlist := f_append(InitProvHash), ProvID := f_sha1((+ InitProvHash)+ RID), ProvIDList := f_append(ProvID), TempTag0 := f_concat(ProvIDList, Countlist), TempTag1 := f_concat(TempTag0, InitProvNodelist), TempTag2 := f_concat(TempTag1, InitProvHashlist), TempTag3 := f_concat(TempTag2, Equilist), TempTag4 := f_concat(TempTag3, Evlist), Tag := f_concat(TempTag4, ProgIDlist).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, NewTag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, DstAdd == Node, List := f_empty(), RLOC := Node, R := rh2, RID := f_sha1((R+ RLOC)+ List), ProvID := f_first(Tag), NewProvID := f_sha1((+ ProvID)+ RID), NewProvID := f_append(NewProvID), NewTag1 := f_removeFirst(Tag), NewTag := f_concat(NewProvID, NewTag1).
ECA Rule prov_rh2_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rh2_4_eca ACTION_ADD<provLink(@RLOC, RID, CurCount, Preloc, PreRID, PreCount, PIDequi, ProvID)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ProvID := f_first(Tag), TempTag0 := f_removeFirst(Tag), PreCount := f_first(TempTag0), CurCount := PreCount+ 1, TempTag1 := f_removeFirst(TempTag0), Preloc := f_first(TempTag1), TempTag2 := f_removeFirst(TempTag1), PreRID := f_first(TempTag2), TempTag3 := f_removeFirst(TempTag2), PIDequi := f_first(TempTag3).
ECA Rule prov_rh2_5_eca ACTION_REMOTE_SEND<recvPacketProv(@Node, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ProvID := f_first(Tag), ProvIDList := f_append(ProvID), TempNewTag0 := f_removeFirst(Tag), Count := f_first(TempNewTag0), NewCount := Count+ 1, NewCountlist := f_append(NewCount), TempNewTag1 := f_removeFirst(TempNewTag0), TempNewTag2 := f_removeFirst(TempNewTag1), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(RIDlist, TempNewTag3), TempNewTag5 := f_concat(Loclist, TempNewTag4), TempNewTag6 := f_concat(NewCountlist, TempNewTag5), NewTag := f_concat(ProvIDList, TempNewTag6).
ECA Rule ro1_eca ACTION_ADD<provHashTable(@Node, PIDequi, ProgID, Loc, RID, Count)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, ProvID := f_first(Tag), RemainTag0 := f_removeFirst(Tag), Count := f_first(RemainTag0), RemainTag1 := f_removeFirst(RemainTag0), Loc := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), RID := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), PIDequi := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), PIDev := f_first(RemainTag4), RemainTag5 := f_removeFirst(RemainTag4), ProgID := f_first(RemainTag5).
ECA Rule ro2_eca ACTION_ADD<provRef(@Node, PID, PIDequi, PIDev)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), ProvID := f_first(Tag), RemainTag0 := f_removeFirst(Tag), Count := f_first(RemainTag0), RemainTag1 := f_removeFirst(RemainTag0), Loc := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), RID := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), PIDequi := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), PIDev := f_first(RemainTag4).
ECA Rule ro3_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>.
ECA Rule rh2_eca ACTION_LOCAL_SEND<recvPacketNP(@Node, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, DstAdd == Node.
ECA Rule rho3_eca ACTION_ADD<provRef(@Node, PID, PIDequi, PIDev)> :- EVENT_RECV<recvPacketNP(@Node, SrcAdd, DstAdd, Data, PIDHash)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDequi := f_first(PIDHash), PIDHash1 := f_removeFirst(PIDHash), PIDev := f_first(PIDHash1).
ECA Rule rho4_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<recvPacketNP(@Node, SrcAdd, DstAdd, Data, PIDHash)>.
ECA Rule ru1Eca0Ins ACTION_ADD<flowEntry(@Node, DstAdd, Next)> :- EVENT_INSERT<updateRoute(@Node, DstAdd, Next)>.
ECA Rule ru1Eca0Del ACTION_DELETE<flowEntry(@Node, DstAdd, Next)> :- EVENT_DELETE<updateRoute(@Node, DstAdd, Next)>.
ECA Rule ru2Eca0Ins ACTION_LOCAL_SEND<resetTrigger(@Node, SeqID)> :- EVENT_INSERT<updateRoute(@Node, DstAdd, Next)>, Time := f_now(), SeqID := f_sha1(+ Time).
ECA Rule ru3_eca ACTION_LOCAL_SEND<trigRecordCount(@Node, SeqID, COUNT< * >)> :- EVENT_RECV<resetTrigger(@Node, SeqID)>, trigRecord(@Node, SeqID).
ECA Rule ru4_eca ACTION_ADD<trigRecord(@Node, SeqID)> :- EVENT_RECV<trigRecordCount(@Node, SeqID, SeqCount)>, SeqCount == 0.
ECA Rule ru5_eca ACTION_REMOTE_SEND<resetTrigger(@Next, SeqID)> :- EVENT_RECV<trigRecordCount(@Node, SeqID, SeqCount)>, link(@Node, Next), SeqCount == 0.
ECA Rule ru6_eca ACTION_ADD<equiHashTable(@Node, PIDequi, EquiKeys, NewFlag)> :- EVENT_RECV<trigRecordCount(@Node, SeqID, SeqCount)>, equiHashTable(@Node, PIDequi, EquiKeys, Flag), SeqCount == 0, NewFlag := 0.
ECA Rule rqini_eca ACTION_REMOTE_SEND<rQuery(@Loc, NQID, RID, Count, PIDev, PIDequi, Ret)> :- EVENT_RECV<provQuery(@X, QID, PID, Ret)>, provRef(@X, PID, PIDequi, PIDev), provHashTable(@X, PIDequi, ProgID, Loc, RID, Count), NQID := f_sha1((+ QID)+ RID).
ECA Rule rqev_eca ACTION_LOCAL_SEND<tQuery(@X, NNQID, PIDev, TupleRet)> :- EVENT_RECV<rQuery(@X, NQID, RID, Count, PIDev, PIDequi, Ret)>, provLink(@X, RID, Count, Preloc, PreRID, PreCount, PIDequi, LocProvID), Preloc == X, PreRID == f_sha1(NULL), TupleRet := X, NNQID := f_sha1(((+ NQID)+ LocProvID)+ PIDev).
ECA Rule rqrec_eca ACTION_REMOTE_SEND<rQuery(@Preloc, NNQID, PreRID, PreCount, PIDev, PIDequi, X)> :- EVENT_RECV<rQuery(@X, NQID, RID, Count, PIDev, PIDequi, ProvID, Ret)>, provLink(@X, RID, Count, Preloc, PreRID, PreCount, PIDequi, LocProvID), PreRID != f_sha1(NULL), NNQID := f_sha1(((+ NQID)+ LocProvID)+ PreRID).
ECA Rule rqsc1_eca ACTION_ADD<slowChangeQuery(@X, NQID, LocProvID, List, TupleRet)> :- EVENT_RECV<rQuery(@X, NQID, RID, Count, PIDev, PIDequi, Ret)>, provLink(@X, RID, Count, Preloc, PreRID, PreCount, PIDequi, LocProvID), ruleExec(@X, RID, R, List), TupleRet := X.
ECA Rule rqsc2Eca0Ins ACTION_LOCAL_SEND<tupleItr(@X, NQID, N)> :- EVENT_INSERT<slowChangeQuery(@X, NQID, LocProvID, List, TupleRet)>, N := 1.
ECA Rule rqsc3_eca ACTION_LOCAL_SEND<tupleItr(@X, NQID, N)> :- EVENT_RECV<tupleItr(@X, NQID, N1)>, slowChangeQuery(@X, NQID, LocProvID, List, TupleRet), N1 < f_size(List), N := N1+ 1.
ECA Rule rqsc4_eca ACTION_LOCAL_SEND<tQuery(@X, NNQID, VID, TupleRet)> :- EVENT_RECV<tupleItr(@X, NQID, N)>, slowChangeQuery(@X, NQID, LocProvID, List, TupleRet), VID := f_item(List, N), NNQID := f_sha1(((+ NQID)+ LocProvID)+ VID).
ECA Rule rqsc5_eca ACTION_REMOTE_SEND<tReturn(@TupleRet, NNQID, VID, Prov)> :- EVENT_RECV<tQuery(@X, NNQID, VID, TupleRet)>, provStr(@X, VID, TpStrList), Prov := f_pEDBTP(TpStrList, X).
ECA Rule rqrt1_eca ACTION_ADD<provResult(@X, NQID, RID, LocProvID, Buff, R, BodyNum, Ret)> :- EVENT_RECV<rQuery(@X, NQID, RID, Count, PIDev, PIDequi, Ret)>, provLink(@X, RID, Count, Preloc, PreRID, PreCount, PIDequi, LocProvID), ruleExec(@X, RID, R, List), BodyNum := f_size(List)+ 1, Buff := f_empty().
ECA Rule rqrt2_eca ACTION_ADD<provResult(@X, NQID, RID, LocProvID, NewBuff, R, BodyNum, Ret)> :- EVENT_RECV<tReturn(@X, NNQID, VID, Prov)>, provResult(@X, NQID, RID, LocProvID, Buff, R, BodyNum, Ret), NNQID == f_sha1(((+ NQID)+ LocProvID)+ VID), ProvBuff := f_append(Prov), NewBuff := f_concat(Buff, ProvBuff).
ECA Rule rqrt3_eca ACTION_ADD<provResult(@X, NQID, RID, LocProvID, NewBuff, R, BodyNum, Ret)> :- EVENT_RECV<rReturn(@X, NNQID, PreRID, Prov)>, provResult(@X, NQID, RID, LocProvID, Buff, R, BodyNum, Ret), NNQID == f_sha1(((+ NQID)+ LocProvID)+ PreRID), ProvBuff := f_append(Prov), NewBuff := f_concat(Buff, ProvBuff).
ECA Rule rqrt4Eca0Ins ACTION_LOCAL_SEND<rReturnSig(@X, NQID, RID, Buff, R, BodyNum, Ret)> :- EVENT_INSERT<provResult(@X, NQID, RID, LocProvID, Buff, R, BodyNum, Ret)>, f_size(Buff) == BodyNum.
ECA Rule rqrt5_eca ACTION_REMOTE_SEND<rReturn(@Ret, NQID, RID, Prov)> :- EVENT_RECV<rReturnSig(@X, NQID, RID, Buff, R, BodyNum, Ret)>, ruleInfo(@X, R, RHead, RBody), Prov := f_pRULEITM(Buff, X, R, RHead, RBody).
