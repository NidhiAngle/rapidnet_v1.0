ECA Rule rs10_eca ACTION_REMOTE_SEND<eMatchingPacketTemp(@RLoc, Switch, SrcAdd, DstAdd, TopPriority, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Switch, SrcAdd, DstAdd, Tag)>, device(@Switch, Dvtype), maxPriority(@Switch, TopPriority), Dvtype == 0, RLoc := Switch, R := rs1, PID1 := f_sha1((device+ Switch)+ Dvtype), PID2 := f_sha1((maxPriority+ Switch)+ TopPriority), List := f_append(PID1), List2 := f_append(PID2), List := f_concat(List, List2), RID := f_sha1(R+ List).
ECA Rule rs11_eca ACTION_REMOTE_SEND<eMatchingPacket(@Switch, SrcAdd, DstAdd, TopPriority, RID, RLoc, Tag)> :- EVENT_RECV<eMatchingPacketTemp(@RLoc, Switch, SrcAdd, DstAdd, TopPriority, RID, R, List, Tag)>.
ECA Rule rs12_eca ACTION_LOCAL_SEND<eMatchingPacketCount(@RLoc, RID, R, List, COUNT< * >)> :- EVENT_RECV<eMatchingPacketTemp(@RLoc, Switch, SrcAdd, DstAdd, TopPriority, RID, R, List, Tag)>, ruleExec(@RLoc, R, RID, List).
ECA Rule rs13_eca ACTION_ADD<ruleExec(@RLoc, RID, R, List)> :- EVENT_RECV<eMatchingPacketCount(@RLoc, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule rs14_eca ACTION_LOCAL_SEND<matchingPacket(@Switch, SrcAdd, DstAdd, TopPriority, NewTag)> :- EVENT_RECV<eMatchingPacket(@Switch, SrcAdd, DstAdd, TopPriority, RID, RLoc, Tag)>, Hash := f_append(RID), NewTag := f_concat(Tag, Hash).
ECA Rule rs1_eca ACTION_LOCAL_SEND<matchingPacketNonProv(@Switch, SrcAdd, DstAdd, TopPriority, PIDequi, PIDev)> :- EVENT_RECV<packetNonProv(@Switch, SrcAdd, DstAdd, PIDequi, PIDev)>, device(@Switch, Dvtype), maxPriority(@Switch, TopPriority), Dvtype == 0.
ECA Rule rs20_eca ACTION_REMOTE_SEND<eMatchingPacketTemp(@RLoc, Switch, SrcAdd, DstAdd, NextPriority, RID, R, List, Tag)> :- EVENT_RECV<matchingPacket(@Switch, SrcAdd, DstAdd, Priority, Tag)>, device(@Switch, Dvtype), flowEntry(@Switch, DstEntry, Next, Priority), Priority > 0, DstAdd != DstEntry, NextPriority := Priority- 1, Dvtype == 0, RLoc := Switch, R := rs2, PID1 := f_sha1((device+ Switch)+ Dvtype), PID2 := f_sha1((((flowEntry+ Switch)+ DstEntry)+ Next)+ Priority), List := f_append(PID1), List2 := f_append(PID2), List := f_concat(List, List2), RID := f_sha1(R+ List).
ECA Rule rs2_eca ACTION_LOCAL_SEND<matchingPacketNonProv(@Switch, SrcAdd, DstAdd, NextPriority, PIDequi, PIDev)> :- EVENT_RECV<matchingPacketNonProv(@Switch, SrcAdd, DstAdd, Priority, PIDequi, PIDev)>, device(@Switch, Dvtype), flowEntry(@Switch, DstEntry, Next, Priority), Priority > 0, DstAdd != DstEntry, NextPriority := Priority- 1, Dvtype == 0.
ECA Rule rs30_eca ACTION_REMOTE_SEND<ePacketTemp(@RLoc, Next, SrcAdd, DstAdd, RID, R, List, Tag)> :- EVENT_RECV<matchingPacket(@Switch, SrcAdd, DstAdd, Priority, Tag)>, device(@Switch, Dvtype), flowEntry(@Switch, DstEntry, Next, Priority), link(@Switch, Next), Priority > 0, DstAdd == DstEntry, Dvtype == 0, RLoc := Switch, R := rs3, PID1 := f_sha1((device+ Switch)+ Dvtype), PID2 := f_sha1((((flowEntry+ Switch)+ DstEntry)+ Next)+ Priority), PID3 := f_sha1((link+ Switch)+ Next), List := f_append(PID1), List2 := f_append(PID2), List := f_concat(List, List2), List3 := f_append(PID3), List := f_concat(List, List3), RID := f_sha1(R+ List).
ECA Rule rs31_eca ACTION_REMOTE_SEND<ePacket(@Next, SrcAdd, DstAdd, RID, RLoc, Tag)> :- EVENT_RECV<ePacketTemp(@RLoc, Next, SrcAdd, DstAdd, RID, R, List, Tag)>.
ECA Rule rs32_eca ACTION_LOCAL_SEND<ePaketCount(@RLoc, RID, R, List, COUNT< * >)> :- EVENT_RECV<ePacketTemp(@RLoc, Next, SrcAdd, DstAdd, RID, R, List, Tag)>, ruleExec(@RLoc, RID, R, List).
ECA Rule rs33_eca ACTION_ADD<ruleExec(@RLoc, RID, R, List)> :- EVENT_RECV<ePaketCount(@RLoc, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule rs34_eca ACTION_LOCAL_SEND<packetProv(@Next, SrcAdd, DstAdd, NewTag)> :- EVENT_RECV<ePacket(@Next, SrcAdd, DstAdd, RID, RLoc, Tag)>, Hash := f_append(RID), NewTag := f_concat(Tag, Hash).
ECA Rule rs3_eca ACTION_REMOTE_SEND<packetNonProv(@Next, SrcAdd, DstAdd, PIDequi, PIDev)> :- EVENT_RECV<matchingPacketNonProv(@Switch, SrcAdd, DstAdd, Priority, PIDequi, PIDev)>, device(@Switch, Dvtype), flowEntry(@Switch, DstEntry, Next, Priority), link(@Switch, Next), Priority > 0, DstAdd == DstEntry, Dvtype == 0.
ECA Rule rs40_eca ACTION_REMOTE_SEND<ePacketTemp(@RLoc, Next, SrcAdd, DstAdd, RID, R, List, Tag)> :- EVENT_RECV<matchingPacket(@Switch, SrcAdd, DstAdd, Priority, Tag)>, device(@Switch, Dvtype), flowEntry(@Switch, DstAdd, Next, Priority), link(@Switch, Next), Priority == 0, Dvtype == 0, RLoc := Switch, R := rs4, PID1 := f_sha1((device+ Switch)+ Dvtype), PID2 := f_sha1((((flowEntry+ Switch)+ DstAdd)+ Next)+ Priority), PID3 := f_sha1((link+ Switch)+ Next), List := f_append(PID1), List2 := f_append(PID2), List := f_concat(List, List2), List3 := f_append(PID3), List := f_concat(List, List3), RID := f_sha1(R+ List).
ECA Rule rs4_eca ACTION_REMOTE_SEND<packetNonProv(@Next, SrcAdd, DstAdd, PIDequi, PIDev)> :- EVENT_RECV<matchingPacketNonProv(@Switch, SrcAdd, DstAdd, Priority, PIDequi, PIDev)>, device(@Switch, Dvtype), flowEntry(@Switch, DstAdd, Next, Priority), link(@Switch, Next), Priority == 0, Dvtype == 0.
ECA Rule rh100Eca0Ins ACTION_LOCAL_SEND<initPacketHash(@Host, SrcAdd, DstAdd, PIDequi)> :- EVENT_INSERT<initPacket(@Host, SrcAdd, DstAdd)>, PIDequi := f_sha1((+ Host)+ DstAdd).
ECA Rule rh101_eca ACTION_LOCAL_SEND<initPacketCount(@Host, SrcAdd, DstAdd, PIDequi, COUNT< * >)> :- EVENT_RECV<initPacketHash(@Host, SrcAdd, DstAdd, PIDequi)>, equiHashTable(@Host, DstAdd, PIDequi).
ECA Rule rh102_eca ACTION_ADD<equiHashTable(@Host, DstAdd, PIDequi)> :- EVENT_RECV<initPacketCount(@Host, SrcAdd, DstAdd, PIDequi, PIDcount)>, PIDcount == 0.
ECA Rule rh103_eca ACTION_REMOTE_SEND<packetNonProv(@Switch, SrcAdd, DstAdd, PIDequi, PIDev)> :- EVENT_RECV<initPacketCount(@Host, SrcAdd, DstAdd, PIDequi, PIDcount)>, device(@Host, Dvtype), linkhr(@Host, Switch), Dvtype == 1, PIDev := f_sha1(((initPacket+ Host)+ SrcAdd)+ DstAdd), PIDcount != 0.
ECA Rule rh104_eca ACTION_REMOTE_SEND<ePacketTemp(@RLoc, Switch, SrcAdd, DstAdd, RID, R, List, Tag)> :- EVENT_RECV<initPacketCount(@Host, SrcAdd, DstAdd, PIDequi, PIDcount)>, device(@Host, Dvtype), linkhr(@Host, Switch), Dvtype == 1, PIDcount == 0, RLoc := Host, R := rh1, PIDev := f_sha1(((initPacket+ Host)+ SrcAdd)+ DstAdd), Equilist := f_append(PIDequi), Evlist := f_append(PIDev), Eventlist := f_concat(Equilist, Evlist), PID1 := f_sha1((device+ Host)+ Dvtype), PID2 := f_sha1((linkhr+ Host)+ Switch), List := f_append(PID1), List2 := f_append(PID2), List := f_concat(List, List2), RID := f_sha1(R+ List), Hashlist := f_append(RID), Tag := f_concat(Eventlist, Hashlist).
ECA Rule rh20_eca ACTION_REMOTE_SEND<eRecvPacketTemp(@RLoc, Host, SrcAdd, DstAdd, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Host, SrcAdd, DstAdd, Tag)>, device(@Host, Dvtype), Dvtype == 1, RLoc := Host, R := rh2, PID1 := f_sha1((device+ Host)+ Dvtype), List := f_append(PID1), RID := f_sha1(R+ List).
ECA Rule rh21_eca ACTION_REMOTE_SEND<eRecvPacket(@Host, SrcAdd, DstAdd, RID, RLoc, Tag)> :- EVENT_RECV<eRecvPacketTemp(@RLoc, Host, SrcAdd, DstAdd, RID, R, List, Tag)>.
ECA Rule rh22_eca ACTION_LOCAL_SEND<eRecvPacketCount(@RLoc, RID, R, List, COUNT< * >)> :- EVENT_RECV<eRecvPacketTemp(@RLoc, Host, SrcAdd, DstAdd, RID, R, List, Tag)>, ruleExec(@RLoc, RID, R, List).
ECA Rule rs23_eca ACTION_ADD<ruleExec(@RLoc, RID, R, List)> :- EVENT_RECV<eRecvPacketCount(@RLoc, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule rh24_eca ACTION_LOCAL_SEND<recvPacketTemp(@Host, SrcAdd, DstAdd, Tag)> :- EVENT_RECV<eRecvPacket(@Host, SrcAdd, DstAdd, RID, RLoc, Tag)>, Hash := f_append(RID), NewTag := f_concat(Tag, Hash).
ECA Rule rh25_eca ACTION_LOCAL_SEND<recvPacketDecomp(@Host, SrcAdd, DstAdd, PIDequi, PIDev, Hashlist)> :- EVENT_RECV<recvPacketTemp(@Host, SrcAdd, DstAdd, Tag)>, PIDequi := f_first(Tag), Remainlist := f_removeFirst(Tag), PIDev := f_first(Remainlist), Hashlist := f_removeFirst(Remainlist).
ECA Rule rh26_eca ACTION_ADD<provHashTable(@Host, PIDequi, Hashlist)> :- EVENT_RECV<recvPacketDecomp(@Host, SrcAdd, DstAdd, PIDequi, PIDev, Hashlist)>.
ECA Rule rh27_eca ACTION_ADD<recvPacket(@Host, SrcAdd, DstAdd, PIDequi, PIDev)> :- EVENT_RECV<recvPacketDecomp(@Host, SrcAdd, DstAdd, PIDequi, PIDev, Hashlist)>.
ECA Rule rh2_eca ACTION_ADD<recvPacket(@Host, SrcAdd, DstAdd, PIDequi, PIDev)> :- EVENT_RECV<packetNonProv(@Host, SrcAdd, DstAdd, PIDequi, PIDev)>, device(@Host, Dvtype), Dvtype == 1.
