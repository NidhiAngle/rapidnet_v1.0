/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-sdn-prov-comp.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdsdnprovcomp;

const string PktfwdSdnProvComp::DEVICE = "device";
const string PktfwdSdnProvComp::EMATCHINGPACKET = "eMatchingPacket";
const string PktfwdSdnProvComp::EMATCHINGPACKETCOUNT = "eMatchingPacketCount";
const string PktfwdSdnProvComp::EMATCHINGPACKETTEMP = "eMatchingPacketTemp";
const string PktfwdSdnProvComp::EPACKET = "ePacket";
const string PktfwdSdnProvComp::EPACKETTEMP = "ePacketTemp";
const string PktfwdSdnProvComp::EPAKETCOUNT = "ePaketCount";
const string PktfwdSdnProvComp::ERECVPACKET = "eRecvPacket";
const string PktfwdSdnProvComp::ERECVPACKETCOUNT = "eRecvPacketCount";
const string PktfwdSdnProvComp::ERECVPACKETTEMP = "eRecvPacketTemp";
const string PktfwdSdnProvComp::FLOWENTRY = "flowEntry";
const string PktfwdSdnProvComp::HASHTABLE = "hashTable";
const string PktfwdSdnProvComp::INITPACKET = "initPacket";
const string PktfwdSdnProvComp::LINK = "link";
const string PktfwdSdnProvComp::LINKHR = "linkhr";
const string PktfwdSdnProvComp::MATCHINGPACKET = "matchingPacket";
const string PktfwdSdnProvComp::MAXPRIORITY = "maxPriority";
const string PktfwdSdnProvComp::PACKET = "packet";
const string PktfwdSdnProvComp::RECVPACKET = "recvPacket";
const string PktfwdSdnProvComp::RULEEXEC = "ruleExec";

NS_LOG_COMPONENT_DEFINE ("PktfwdSdnProvComp");
NS_OBJECT_ENSURE_REGISTERED (PktfwdSdnProvComp);

TypeId
PktfwdSdnProvComp::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdsdnprovcomp::PktfwdSdnProvComp")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdSdnProvComp> ()
    ;
  return tid;
}

PktfwdSdnProvComp::PktfwdSdnProvComp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdSdnProvComp::~PktfwdSdnProvComp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdSdnProvComp::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdSdnProvComp::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdSdnProvComp Application Started");
}

void
PktfwdSdnProvComp::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdSdnProvComp Application Stopped");
}

void
PktfwdSdnProvComp::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (DEVICE, attrdeflist (
    attrdef ("device_attr2", INT32)));

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4),
    attrdef ("flowEntry_attr4", INT32)));

  AddRelationWithKeys (HASHTABLE, attrdeflist (
    attrdef ("hashTable_attr2", INT32)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (LINKHR, attrdeflist (
    attrdef ("linkhr_attr2", IPV4)));

  AddRelationWithKeys (MAXPRIORITY, attrdeflist (
    attrdef ("maxPriority_attr2", INT32)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr4", LIST)));

}

void
PktfwdSdnProvComp::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, PACKET))
    {
      Rs10_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKETTEMP))
    {
      Rs11_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKETTEMP))
    {
      Rs12_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKETCOUNT))
    {
      Rs13_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKET))
    {
      Rs15_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs20_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs30_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Rs31_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Rs32_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPAKETCOUNT))
    {
      Rs33_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Rs34_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs40_eca (tuple);
    }
  if (IsInsertEvent (tuple, DEVICE))
    {
      Rh10Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Rh10Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, LINKHR))
    {
      Rh10Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rh20_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Rh21_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Rh22_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETCOUNT))
    {
      Rs23_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKET))
    {
      Rh24_eca (tuple);
    }
}

void
PktfwdSdnProvComp::Rs10_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs10_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    packet,
    strlist ("device_attr1"),
    strlist ("packet_attr1"));

  result = GetRelation (MAXPRIORITY)->Join (
    result,
    strlist ("maxPriority_attr1"),
    strlist ("packet_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("maxPriority")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("maxPriority_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("SwitchList",
    FAppend::New (
      VarExpr::New ("packet_attr1"))));

  result->Assign (Assignor::New ("SrcAddList",
    FAppend::New (
      VarExpr::New ("packet_attr2"))));

  result->Assign (Assignor::New ("SwcSrcList",
    FConcat::New (
      VarExpr::New ("SwitchList"),
      VarExpr::New ("SrcAddList"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATCHINGPACKETTEMP,
    strlist ("RLoc",
      "SwcSrcList",
      "packet_attr3",
      "packet_attr4",
      "maxPriority_attr2",
      "RID",
      "R",
      "List",
      "packet_attr5",
      "RLoc"),
    strlist ("eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr2",
      "eMatchingPacketTemp_attr3",
      "eMatchingPacketTemp_attr4",
      "eMatchingPacketTemp_attr5",
      "eMatchingPacketTemp_attr6",
      "eMatchingPacketTemp_attr7",
      "eMatchingPacketTemp_attr8",
      "eMatchingPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rs11_eca (Ptr<Tuple> eMatchingPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rs11_eca triggered");

  Ptr<Tuple> result = eMatchingPacketTemp;

  result->Assign (Assignor::New ("Switch",
    FFirst::New (
      VarExpr::New ("eMatchingPacketTemp_attr2"))));

  result->Assign (Assignor::New ("SrcList",
    FRemoveFirst::New (
      VarExpr::New ("eMatchingPacketTemp_attr2"))));

  result->Assign (Assignor::New ("SrcAdd",
    FFirst::New (
      VarExpr::New ("SrcList"))));

  result = result->Project (
    EMATCHINGPACKET,
    strlist ("Switch",
      "SrcAdd",
      "eMatchingPacketTemp_attr3",
      "eMatchingPacketTemp_attr4",
      "eMatchingPacketTemp_attr5",
      "eMatchingPacketTemp_attr6",
      "eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr9",
      "Switch"),
    strlist ("eMatchingPacket_attr1",
      "eMatchingPacket_attr2",
      "eMatchingPacket_attr3",
      "eMatchingPacket_attr4",
      "eMatchingPacket_attr5",
      "eMatchingPacket_attr6",
      "eMatchingPacket_attr7",
      "eMatchingPacket_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rs12_eca (Ptr<Tuple> eMatchingPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rs12_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eMatchingPacketTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr2", "ruleExec_attr3", "ruleExec_attr1"),
    strlist ("eMatchingPacketTemp_attr8", "eMatchingPacketTemp_attr7", "eMatchingPacketTemp_attr6", "eMatchingPacketTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eMatchingPacketTemp);

  result = result->Project (
    EMATCHINGPACKETCOUNT,
    strlist ("eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr6",
      "eMatchingPacketTemp_attr7",
      "eMatchingPacketTemp_attr8",
      "count"),
    strlist ("eMatchingPacketCount_attr1",
      "eMatchingPacketCount_attr2",
      "eMatchingPacketCount_attr3",
      "eMatchingPacketCount_attr4",
      "eMatchingPacketCount_attr5"));

  SendLocal (result);
}

void
PktfwdSdnProvComp::Rs13_eca (Ptr<Tuple> eMatchingPacketCount)
{
  RAPIDNET_LOG_INFO ("Rs13_eca triggered");

  Ptr<Tuple> result = eMatchingPacketCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eMatchingPacketCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("eMatchingPacketCount_attr1",
      "eMatchingPacketCount_attr2",
      "eMatchingPacketCount_attr3",
      "eMatchingPacketCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PktfwdSdnProvComp::Rs15_eca (Ptr<Tuple> eMatchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs15_eca triggered");

  Ptr<Tuple> result = eMatchingPacket;

  result->Assign (Assignor::New ("Hash",
    FAppend::New (
      VarExpr::New ("eMatchingPacket_attr6"))));

  result->Assign (Assignor::New ("NewHashList",
    FConcat::New (
      VarExpr::New ("eMatchingPacket_attr8"),
      VarExpr::New ("Hash"))));

  result = result->Project (
    MATCHINGPACKET,
    strlist ("eMatchingPacket_attr1",
      "eMatchingPacket_attr2",
      "eMatchingPacket_attr3",
      "eMatchingPacket_attr4",
      "eMatchingPacket_attr5",
      "NewHashList"),
    strlist ("matchingPacket_attr1",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "matchingPacket_attr5",
      "matchingPacket_attr6"));

  SendLocal (result);
}

void
PktfwdSdnProvComp::Rs20_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs20_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    matchingPacket,
    strlist ("device_attr1"),
    strlist ("matchingPacket_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr5", "matchingPacket_attr1"));

  result->Assign (Assignor::New ("NextPriority",
    Operation::New (RN_MINUS,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("matchingPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs2"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("flowEntry")),
              VarExpr::New ("matchingPacket_attr1")),
            VarExpr::New ("flowEntry_attr2")),
          VarExpr::New ("flowEntry_attr3")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("SwitchList",
    FAppend::New (
      VarExpr::New ("matchingPacket_attr1"))));

  result->Assign (Assignor::New ("SrcAddList",
    FAppend::New (
      VarExpr::New ("matchingPacket_attr2"))));

  result->Assign (Assignor::New ("SwcSrcList",
    FConcat::New (
      VarExpr::New ("SwitchList"),
      VarExpr::New ("SrcAddList"))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matchingPacket_attr3"),
      VarExpr::New ("flowEntry_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATCHINGPACKETTEMP,
    strlist ("RLoc",
      "SwcSrcList",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "NextPriority",
      "RID",
      "R",
      "List",
      "matchingPacket_attr6",
      "RLoc"),
    strlist ("eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr2",
      "eMatchingPacketTemp_attr3",
      "eMatchingPacketTemp_attr4",
      "eMatchingPacketTemp_attr5",
      "eMatchingPacketTemp_attr6",
      "eMatchingPacketTemp_attr7",
      "eMatchingPacketTemp_attr8",
      "eMatchingPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rs30_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs30_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    matchingPacket,
    strlist ("device_attr1"),
    strlist ("matchingPacket_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr5", "matchingPacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "matchingPacket_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("matchingPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs3"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("flowEntry")),
              VarExpr::New ("matchingPacket_attr1")),
            VarExpr::New ("flowEntry_attr2")),
          VarExpr::New ("flowEntry_attr3")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matchingPacket_attr3"),
      VarExpr::New ("flowEntry_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "flowEntry_attr3",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "RID",
      "R",
      "List",
      "matchingPacket_attr6",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      "ePacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rs31_eca (Ptr<Tuple> ePacketTemp)
{
  RAPIDNET_LOG_INFO ("Rs31_eca triggered");

  Ptr<Tuple> result = ePacketTemp;

  result = result->Project (
    EPACKET,
    strlist ("ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr1",
      "ePacketTemp_attr9",
      "ePacketTemp_attr2"),
    strlist ("ePacket_attr1",
      "ePacket_attr2",
      "ePacket_attr3",
      "ePacket_attr4",
      "ePacket_attr5",
      "ePacket_attr6",
      "ePacket_attr7",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rs32_eca (Ptr<Tuple> ePacketTemp)
{
  RAPIDNET_LOG_INFO ("Rs32_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ePacketTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ePacketTemp_attr8", "ePacketTemp_attr7", "ePacketTemp_attr6", "ePacketTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, ePacketTemp);

  result = result->Project (
    EPAKETCOUNT,
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      "count"),
    strlist ("ePaketCount_attr1",
      "ePaketCount_attr2",
      "ePaketCount_attr3",
      "ePaketCount_attr4",
      "ePaketCount_attr5"));

  SendLocal (result);
}

void
PktfwdSdnProvComp::Rs33_eca (Ptr<Tuple> ePaketCount)
{
  RAPIDNET_LOG_INFO ("Rs33_eca triggered");

  Ptr<Tuple> result = ePaketCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("ePaketCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("ePaketCount_attr1",
      "ePaketCount_attr2",
      "ePaketCount_attr3",
      "ePaketCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PktfwdSdnProvComp::Rs34_eca (Ptr<Tuple> ePacket)
{
  RAPIDNET_LOG_INFO ("Rs34_eca triggered");

  Ptr<Tuple> result = ePacket;

  result->Assign (Assignor::New ("Hash",
    FAppend::New (
      VarExpr::New ("ePacket_attr5"))));

  result->Assign (Assignor::New ("NewHashList",
    FConcat::New (
      VarExpr::New ("ePacket_attr7"),
      VarExpr::New ("Hash"))));

  result = result->Project (
    PACKET,
    strlist ("ePacket_attr1",
      "ePacket_attr2",
      "ePacket_attr3",
      "ePacket_attr4",
      "NewHashList"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5"));

  SendLocal (result);
}

void
PktfwdSdnProvComp::Rs40_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs40_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    matchingPacket,
    strlist ("device_attr1"),
    strlist ("matchingPacket_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr3", "matchingPacket_attr5", "matchingPacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "matchingPacket_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("matchingPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs4"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("flowEntry")),
              VarExpr::New ("matchingPacket_attr1")),
            VarExpr::New ("matchingPacket_attr3")),
          VarExpr::New ("flowEntry_attr3")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "flowEntry_attr3",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "RID",
      "R",
      "List",
      "matchingPacket_attr6",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      "ePacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rh10Eca0Ins (Ptr<Tuple> device)
{
  RAPIDNET_LOG_INFO ("Rh10Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    device,
    strlist ("initPacket_attr1"),
    strlist ("device_attr1"));

  result = GetRelation (LINKHR)->Join (
    result,
    strlist ("linkhr_attr1"),
    strlist ("device_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("device_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("device_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("Eventlist",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("device_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("linkhr")),
          VarExpr::New ("device_attr1")),
        VarExpr::New ("linkhr_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("RID"))));

  result->Assign (Assignor::New ("HashList",
    FConcat::New (
      VarExpr::New ("Eventlist"),
      VarExpr::New ("RIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "HashList",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      "ePacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rh10Eca1Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Rh10Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    initPacket,
    strlist ("device_attr1"),
    strlist ("initPacket_attr1"));

  result = GetRelation (LINKHR)->Join (
    result,
    strlist ("linkhr_attr1"),
    strlist ("initPacket_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("Eventlist",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("linkhr")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("linkhr_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("RID"))));

  result->Assign (Assignor::New ("HashList",
    FConcat::New (
      VarExpr::New ("Eventlist"),
      VarExpr::New ("RIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "HashList",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      "ePacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rh10Eca2Ins (Ptr<Tuple> linkhr)
{
  RAPIDNET_LOG_INFO ("Rh10Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    linkhr,
    strlist ("device_attr1"),
    strlist ("linkhr_attr1"));

  result = GetRelation (INITPACKET)->Join (
    result,
    strlist ("initPacket_attr1"),
    strlist ("linkhr_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("linkhr_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("linkhr_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("Eventlist",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("linkhr_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("linkhr")),
          VarExpr::New ("linkhr_attr1")),
        VarExpr::New ("linkhr_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("RID"))));

  result->Assign (Assignor::New ("HashList",
    FConcat::New (
      VarExpr::New ("Eventlist"),
      VarExpr::New ("RIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "HashList",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      "ePacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rh20_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rh20_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    packet,
    strlist ("device_attr1"),
    strlist ("packet_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    ERECVPACKETTEMP,
    strlist ("RLoc",
      "packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "RID",
      "R",
      "List",
      "packet_attr5",
      "RLoc"),
    strlist ("eRecvPacketTemp_attr1",
      "eRecvPacketTemp_attr2",
      "eRecvPacketTemp_attr3",
      "eRecvPacketTemp_attr4",
      "eRecvPacketTemp_attr5",
      "eRecvPacketTemp_attr6",
      "eRecvPacketTemp_attr7",
      "eRecvPacketTemp_attr8",
      "eRecvPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rh21_eca (Ptr<Tuple> eRecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rh21_eca triggered");

  Ptr<Tuple> result = eRecvPacketTemp;

  result = result->Project (
    ERECVPACKET,
    strlist ("eRecvPacketTemp_attr2",
      "eRecvPacketTemp_attr3",
      "eRecvPacketTemp_attr4",
      "eRecvPacketTemp_attr5",
      "eRecvPacketTemp_attr6",
      "eRecvPacketTemp_attr1",
      "eRecvPacketTemp_attr9",
      "eRecvPacketTemp_attr2"),
    strlist ("eRecvPacket_attr1",
      "eRecvPacket_attr2",
      "eRecvPacket_attr3",
      "eRecvPacket_attr4",
      "eRecvPacket_attr5",
      "eRecvPacket_attr6",
      "eRecvPacket_attr7",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProvComp::Rh22_eca (Ptr<Tuple> eRecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rh22_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eRecvPacketTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("eRecvPacketTemp_attr8", "eRecvPacketTemp_attr7", "eRecvPacketTemp_attr6", "eRecvPacketTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eRecvPacketTemp);

  result = result->Project (
    ERECVPACKETCOUNT,
    strlist ("eRecvPacketTemp_attr1",
      "eRecvPacketTemp_attr6",
      "eRecvPacketTemp_attr7",
      "eRecvPacketTemp_attr8",
      "count"),
    strlist ("eRecvPacketCount_attr1",
      "eRecvPacketCount_attr2",
      "eRecvPacketCount_attr3",
      "eRecvPacketCount_attr4",
      "eRecvPacketCount_attr5"));

  SendLocal (result);
}

void
PktfwdSdnProvComp::Rs23_eca (Ptr<Tuple> eRecvPacketCount)
{
  RAPIDNET_LOG_INFO ("Rs23_eca triggered");

  Ptr<Tuple> result = eRecvPacketCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eRecvPacketCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("eRecvPacketCount_attr1",
      "eRecvPacketCount_attr2",
      "eRecvPacketCount_attr3",
      "eRecvPacketCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PktfwdSdnProvComp::Rh24_eca (Ptr<Tuple> eRecvPacket)
{
  RAPIDNET_LOG_INFO ("Rh24_eca triggered");

  Ptr<Tuple> result = eRecvPacket;

  result->Assign (Assignor::New ("Hash",
    FAppend::New (
      VarExpr::New ("eRecvPacket_attr5"))));

  result->Assign (Assignor::New ("NewHashList",
    FConcat::New (
      VarExpr::New ("eRecvPacket_attr7"),
      VarExpr::New ("Hash"))));

  result = result->Project (
    RECVPACKET,
    strlist ("eRecvPacket_attr1",
      "eRecvPacket_attr2",
      "eRecvPacket_attr3",
      "eRecvPacket_attr4",
      "NewHashList"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4",
      "recvPacket_attr5"));

  Insert (result);
}

