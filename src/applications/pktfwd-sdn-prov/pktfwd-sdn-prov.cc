/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-sdn-prov.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdsdnprov;

const string PktfwdSdnProv::DEVICE = "device";
const string PktfwdSdnProv::EMATCHINGPACKET = "eMatchingPacket";
const string PktfwdSdnProv::EMATCHINGPACKETTEMP = "eMatchingPacketTemp";
const string PktfwdSdnProv::EPACKET = "ePacket";
const string PktfwdSdnProv::EPACKETTEMP = "ePacketTemp";
const string PktfwdSdnProv::ERECVPACKET = "eRecvPacket";
const string PktfwdSdnProv::ERECVPACKETTEMP = "eRecvPacketTemp";
const string PktfwdSdnProv::FLOWENTRY = "flowEntry";
const string PktfwdSdnProv::INITPACKET = "initPacket";
const string PktfwdSdnProv::LINK = "link";
const string PktfwdSdnProv::LINKHR = "linkhr";
const string PktfwdSdnProv::MATCHINGPACKET = "matchingPacket";
const string PktfwdSdnProv::MAXPRIORITY = "maxPriority";
const string PktfwdSdnProv::PACKET = "packet";
const string PktfwdSdnProv::PROV = "prov";
const string PktfwdSdnProv::RECVPACKET = "recvPacket";
const string PktfwdSdnProv::RULEEXEC = "ruleExec";

NS_LOG_COMPONENT_DEFINE ("PktfwdSdnProv");
NS_OBJECT_ENSURE_REGISTERED (PktfwdSdnProv);

TypeId
PktfwdSdnProv::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdsdnprov::PktfwdSdnProv")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdSdnProv> ()
    ;
  return tid;
}

PktfwdSdnProv::PktfwdSdnProv()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdSdnProv::~PktfwdSdnProv()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdSdnProv::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdSdnProv::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdSdnProv Application Started");
}

void
PktfwdSdnProv::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdSdnProv Application Stopped");
}

void
PktfwdSdnProv::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (DEVICE, attrdeflist (
    attrdef ("device_attr2", INT32)));

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4),
    attrdef ("flowEntry_attr4", INT32)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (LINKHR, attrdeflist (
    attrdef ("linkhr_attr2", IPV4)));

  AddRelationWithKeys (MAXPRIORITY, attrdeflist (
    attrdef ("maxPriority_attr2", INT32)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4),
    attrdef ("recvPacket_attr4", STR)));

}

void
PktfwdSdnProv::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, INITPACKET))
    {
      R00Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, DEVICE))
    {
      R01Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, MAXPRIORITY))
    {
      R02Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      R03Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rs10_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKETTEMP))
    {
      Rs11_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKETTEMP))
    {
      Rs12_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKET))
    {
      Rs13_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMATCHINGPACKET))
    {
      Rs14_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs20_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs30_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Rs31_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Fs32_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Rs33_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Rs34_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs40_eca (tuple);
    }
  if (IsInsertEvent (tuple, DEVICE))
    {
      Rh10Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Rh10Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, LINKHR))
    {
      Rh10Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rh20_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Rh21_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Rh22_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKET))
    {
      Rh23_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKET))
    {
      Rh24_eca (tuple);
    }
}

void
PktfwdSdnProv::R00Eca1Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("R00Eca1Ins triggered");

  Ptr<Tuple> result = initPacket;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("initPacket_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::R01Eca1Ins (Ptr<Tuple> device)
{
  RAPIDNET_LOG_INFO ("R01Eca1Ins triggered");

  Ptr<Tuple> result = device;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("device_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("device_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("device_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::R02Eca1Ins (Ptr<Tuple> maxPriority)
{
  RAPIDNET_LOG_INFO ("R02Eca1Ins triggered");

  Ptr<Tuple> result = maxPriority;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("maxPriority_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("maxPriority")),
          VarExpr::New ("maxPriority_attr1")),
        VarExpr::New ("maxPriority_attr2")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("maxPriority_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::R03Eca1Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("R03Eca1Ins triggered");

  Ptr<Tuple> result = flowEntry;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("flowEntry_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("Switch")),
            VarExpr::New ("flowEntry_attr2")),
          VarExpr::New ("flowEntry_attr3")),
        VarExpr::New ("flowEntry_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("flowEntry_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rs10_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs10_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    packet,
    strlist ("device_attr1"),
    strlist ("packet_attr1"));

  result = GetRelation (MAXPRIORITY)->Join (
    result,
    strlist ("maxPriority_attr1"),
    strlist ("packet_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packet_attr1")),
            VarExpr::New ("packet_attr2")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("packet_attr4")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("maxPriority")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("maxPriority_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATCHINGPACKETTEMP,
    strlist ("RLoc",
      "packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "maxPriority_attr2",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr2",
      "eMatchingPacketTemp_attr3",
      "eMatchingPacketTemp_attr4",
      "eMatchingPacketTemp_attr5",
      "eMatchingPacketTemp_attr6",
      "eMatchingPacketTemp_attr7",
      "eMatchingPacketTemp_attr8",
      "eMatchingPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rs11_eca (Ptr<Tuple> eMatchingPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rs11_eca triggered");

  Ptr<Tuple> result = eMatchingPacketTemp;

  result = result->Project (
    EMATCHINGPACKET,
    strlist ("eMatchingPacketTemp_attr2",
      "eMatchingPacketTemp_attr3",
      "eMatchingPacketTemp_attr4",
      "eMatchingPacketTemp_attr5",
      "eMatchingPacketTemp_attr6",
      "eMatchingPacketTemp_attr7",
      "eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr2"),
    strlist ("eMatchingPacket_attr1",
      "eMatchingPacket_attr2",
      "eMatchingPacket_attr3",
      "eMatchingPacket_attr4",
      "eMatchingPacket_attr5",
      "eMatchingPacket_attr6",
      "eMatchingPacket_attr7",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rs12_eca (Ptr<Tuple> eMatchingPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rs12_eca triggered");

  Ptr<Tuple> result = eMatchingPacketTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr7",
      "eMatchingPacketTemp_attr8",
      "eMatchingPacketTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rs13_eca (Ptr<Tuple> eMatchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs13_eca triggered");

  Ptr<Tuple> result = eMatchingPacket;

  result = result->Project (
    MATCHINGPACKET,
    strlist ("eMatchingPacket_attr1",
      "eMatchingPacket_attr2",
      "eMatchingPacket_attr3",
      "eMatchingPacket_attr4",
      "eMatchingPacket_attr5"),
    strlist ("matchingPacket_attr1",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "matchingPacket_attr5"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rs14_eca (Ptr<Tuple> eMatchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs14_eca triggered");

  Ptr<Tuple> result = eMatchingPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("matchingPacket")),
                VarExpr::New ("eMatchingPacket_attr1")),
              VarExpr::New ("eMatchingPacket_attr2")),
            VarExpr::New ("eMatchingPacket_attr3")),
          VarExpr::New ("eMatchingPacket_attr4")),
        VarExpr::New ("eMatchingPacket_attr5")))));

  result = result->Project (
    PROV,
    strlist ("eMatchingPacket_attr1",
      "VID",
      "eMatchingPacket_attr6",
      "eMatchingPacket_attr7"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rs20_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs20_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    matchingPacket,
    strlist ("device_attr1"),
    strlist ("matchingPacket_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr5", "matchingPacket_attr1"));

  result->Assign (Assignor::New ("NextPriority",
    Operation::New (RN_MINUS,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("matchingPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs2"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("matchingPacket")),
                VarExpr::New ("matchingPacket_attr1")),
              VarExpr::New ("matchingPacket_attr2")),
            VarExpr::New ("matchingPacket_attr3")),
          VarExpr::New ("matchingPacket_attr4")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("flowEntry")),
              VarExpr::New ("matchingPacket_attr1")),
            VarExpr::New ("flowEntry_attr2")),
          VarExpr::New ("flowEntry_attr3")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matchingPacket_attr3"),
      VarExpr::New ("flowEntry_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATCHINGPACKETTEMP,
    strlist ("RLoc",
      "matchingPacket_attr1",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "NextPriority",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("eMatchingPacketTemp_attr1",
      "eMatchingPacketTemp_attr2",
      "eMatchingPacketTemp_attr3",
      "eMatchingPacketTemp_attr4",
      "eMatchingPacketTemp_attr5",
      "eMatchingPacketTemp_attr6",
      "eMatchingPacketTemp_attr7",
      "eMatchingPacketTemp_attr8",
      "eMatchingPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rs30_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs30_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    matchingPacket,
    strlist ("device_attr1"),
    strlist ("matchingPacket_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr5", "matchingPacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "matchingPacket_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("matchingPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs3"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("matchingPacket")),
                VarExpr::New ("matchingPacket_attr1")),
              VarExpr::New ("matchingPacket_attr2")),
            VarExpr::New ("matchingPacket_attr3")),
          VarExpr::New ("matchingPacket_attr4")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("flowEntry")),
              VarExpr::New ("matchingPacket_attr1")),
            VarExpr::New ("flowEntry_attr2")),
          VarExpr::New ("flowEntry_attr3")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matchingPacket_attr3"),
      VarExpr::New ("flowEntry_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "flowEntry_attr3",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rs31_eca (Ptr<Tuple> ePacketTemp)
{
  RAPIDNET_LOG_INFO ("Rs31_eca triggered");

  Ptr<Tuple> result = ePacketTemp;

  result = result->Project (
    EPACKET,
    strlist ("ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr1",
      "ePacketTemp_attr2"),
    strlist ("ePacket_attr1",
      "ePacket_attr2",
      "ePacket_attr3",
      "ePacket_attr4",
      "ePacket_attr5",
      "ePacket_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Fs32_eca (Ptr<Tuple> ePacketTemp)
{
  RAPIDNET_LOG_INFO ("Fs32_eca triggered");

  Ptr<Tuple> result = ePacketTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rs33_eca (Ptr<Tuple> ePacket)
{
  RAPIDNET_LOG_INFO ("Rs33_eca triggered");

  Ptr<Tuple> result = ePacket;

  result = result->Project (
    PACKET,
    strlist ("ePacket_attr1",
      "ePacket_attr2",
      "ePacket_attr3",
      "ePacket_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rs34_eca (Ptr<Tuple> ePacket)
{
  RAPIDNET_LOG_INFO ("Rs34_eca triggered");

  Ptr<Tuple> result = ePacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("ePacket_attr1")),
            VarExpr::New ("ePacket_attr2")),
          VarExpr::New ("ePacket_attr3")),
        VarExpr::New ("ePacket_attr4")))));

  result = result->Project (
    PROV,
    strlist ("ePacket_attr1",
      "VID",
      "ePacket_attr5",
      "ePacket_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rs40_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs40_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    matchingPacket,
    strlist ("device_attr1"),
    strlist ("matchingPacket_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr3", "matchingPacket_attr5", "matchingPacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "matchingPacket_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("matchingPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs4"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("matchingPacket")),
                VarExpr::New ("matchingPacket_attr1")),
              VarExpr::New ("matchingPacket_attr2")),
            VarExpr::New ("matchingPacket_attr3")),
          VarExpr::New ("matchingPacket_attr4")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("flowEntry")),
              VarExpr::New ("matchingPacket_attr1")),
            VarExpr::New ("matchingPacket_attr3")),
          VarExpr::New ("flowEntry_attr3")),
        VarExpr::New ("matchingPacket_attr5")))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("matchingPacket_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "flowEntry_attr3",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rh10Eca0Ins (Ptr<Tuple> device)
{
  RAPIDNET_LOG_INFO ("Rh10Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    device,
    strlist ("initPacket_attr1"),
    strlist ("device_attr1"));

  result = GetRelation (LINKHR)->Join (
    result,
    strlist ("linkhr_attr1"),
    strlist ("device_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("device_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("device_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("device_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("linkhr")),
          VarExpr::New ("device_attr1")),
        VarExpr::New ("linkhr_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rh10Eca1Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Rh10Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    initPacket,
    strlist ("device_attr1"),
    strlist ("initPacket_attr1"));

  result = GetRelation (LINKHR)->Join (
    result,
    strlist ("linkhr_attr1"),
    strlist ("initPacket_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("linkhr")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("linkhr_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rh10Eca2Ins (Ptr<Tuple> linkhr)
{
  RAPIDNET_LOG_INFO ("Rh10Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    linkhr,
    strlist ("device_attr1"),
    strlist ("linkhr_attr1"));

  result = GetRelation (INITPACKET)->Join (
    result,
    strlist ("initPacket_attr1"),
    strlist ("linkhr_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("linkhr_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("linkhr_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("linkhr_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("linkhr")),
          VarExpr::New ("linkhr_attr1")),
        VarExpr::New ("linkhr_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLoc",
      "linkhr_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("ePacketTemp_attr1",
      "ePacketTemp_attr2",
      "ePacketTemp_attr3",
      "ePacketTemp_attr4",
      "ePacketTemp_attr5",
      "ePacketTemp_attr6",
      "ePacketTemp_attr7",
      "ePacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rh20_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rh20_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (DEVICE)->Join (
    packet,
    strlist ("device_attr1"),
    strlist ("packet_attr1"));

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("device")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("device_attr2")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packet_attr1")),
            VarExpr::New ("packet_attr2")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("packet_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLoc")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("device_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    ERECVPACKETTEMP,
    strlist ("RLoc",
      "packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "RID",
      "R",
      "List",
      "RLoc"),
    strlist ("eRecvPacketTemp_attr1",
      "eRecvPacketTemp_attr2",
      "eRecvPacketTemp_attr3",
      "eRecvPacketTemp_attr4",
      "eRecvPacketTemp_attr5",
      "eRecvPacketTemp_attr6",
      "eRecvPacketTemp_attr7",
      "eRecvPacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rh21_eca (Ptr<Tuple> eRecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rh21_eca triggered");

  Ptr<Tuple> result = eRecvPacketTemp;

  result = result->Project (
    ERECVPACKET,
    strlist ("eRecvPacketTemp_attr2",
      "eRecvPacketTemp_attr3",
      "eRecvPacketTemp_attr4",
      "eRecvPacketTemp_attr5",
      "eRecvPacketTemp_attr6",
      "eRecvPacketTemp_attr1",
      "eRecvPacketTemp_attr2"),
    strlist ("eRecvPacket_attr1",
      "eRecvPacket_attr2",
      "eRecvPacket_attr3",
      "eRecvPacket_attr4",
      "eRecvPacket_attr5",
      "eRecvPacket_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdSdnProv::Rh22_eca (Ptr<Tuple> eRecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Rh22_eca triggered");

  Ptr<Tuple> result = eRecvPacketTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eRecvPacketTemp_attr1",
      "eRecvPacketTemp_attr6",
      "eRecvPacketTemp_attr7",
      "eRecvPacketTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  SendLocal (result);
}

void
PktfwdSdnProv::Rh23_eca (Ptr<Tuple> eRecvPacket)
{
  RAPIDNET_LOG_INFO ("Rh23_eca triggered");

  Ptr<Tuple> result = eRecvPacket;

  result = result->Project (
    RECVPACKET,
    strlist ("eRecvPacket_attr1",
      "eRecvPacket_attr2",
      "eRecvPacket_attr3",
      "eRecvPacket_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4"));

  Insert (result);
}

void
PktfwdSdnProv::Rh24_eca (Ptr<Tuple> eRecvPacket)
{
  RAPIDNET_LOG_INFO ("Rh24_eca triggered");

  Ptr<Tuple> result = eRecvPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("eRecvPacket_attr1")),
            VarExpr::New ("eRecvPacket_attr2")),
          VarExpr::New ("eRecvPacket_attr3")),
        VarExpr::New ("eRecvPacket_attr4")))));

  result = result->Project (
    PROV,
    strlist ("eRecvPacket_attr1",
      "VID",
      "eRecvPacket_attr5",
      "eRecvPacket_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  SendLocal (result);
}

